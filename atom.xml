<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Python绿色通道</title>
  <icon>https://www.gravatar.com/avatar/77a9801d294eec2cd8544a0a2496dbd6</icon>
  <subtitle>a live for changing the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-24T11:40:34.469Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>逆水寒</name>
    <email>hg_liuzl@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础教程2</title>
    <link href="http://yoursite.com/2018/01/24/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B1/"/>
    <id>http://yoursite.com/2018/01/24/Python基础教程1/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:40:34.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-起步"><a href="#1-起步" class="headerlink" title="1.起步"></a>1.起步</h3><h3 id="2-变量和简单数据类型"><a href="#2-变量和简单数据类型" class="headerlink" title="2.变量和简单数据类型"></a>2.变量和简单数据类型</h3><h4 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = &quot;hello world python&quot;</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><h4 id="2-命名"><a href="#2-命名" class="headerlink" title="2.命名"></a>2.命名</h4><h5 id="1-命名与使用"><a href="#1-命名与使用" class="headerlink" title="1.命名与使用"></a>1.命名与使用</h5><h5 id="2-使用变量时避免命名错误"><a href="#2-使用变量时避免命名错误" class="headerlink" title="2.使用变量时避免命名错误"></a>2.使用变量时避免命名错误</h5><h4 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h4><h5 id="1-使用方法修改字符串的大小写"><a href="#1-使用方法修改字符串的大小写" class="headerlink" title="1.使用方法修改字符串的大小写"></a>1.使用方法修改字符串的大小写</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;ada lovelace&apos;</span><br><span class="line">print(name.title())</span><br><span class="line"></span><br><span class="line">输出得到：</span><br><span class="line">Ada Lovelace</span><br></pre></td></tr></table></figure><p>title()以首字母大写的方式显示每个单词，即每个单词的首字母都改为大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><p>#####2.拼接字符串<br>用“+” 来拼接字符串</p><p>“\t,\n”来空格与换行</p><h5 id="3-删除空白"><a href="#3-删除空白" class="headerlink" title="3.删除空白"></a>3.删除空白</h5><ol><li>rstrip() 删除末尾的空白</li><li>lstrip() 删除头部的空白</li><li>strip() 删除字符串两端的空白</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg = &apos; python &apos;</span><br><span class="line">print(msg.rstrip())</span><br><span class="line">print(msg.lstrip())</span><br><span class="line">print(msg.strip())</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line">python</span><br><span class="line">python </span><br><span class="line">python</span><br></pre></td></tr></table></figure><h5 id="4-使用字符串避免语法错误"><a href="#4-使用字符串避免语法错误" class="headerlink" title="4.使用字符串避免语法错误"></a>4.使用字符串避免语法错误</h5><p>单引号与单引号一对，<br>双引号与双引号是一对，<br>一般要成对出现，且。</p><h4 id="4-使用函数str-避免类型错误"><a href="#4-使用函数str-避免类型错误" class="headerlink" title="4.使用函数str()避免类型错误"></a>4.使用函数str()避免类型错误</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 23</span><br><span class="line">msg = &quot;Happy &quot;+str(age)+&quot; rd Birthday&quot;  # 必须使用str()否则python识别不了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure><h3 id="3-列表简介"><a href="#3-列表简介" class="headerlink" title="3.列表简介"></a>3.列表简介</h3><h4 id="1-列表是什么"><a href="#1-列表是什么" class="headerlink" title="1.列表是什么"></a>1.列表是什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;trek&apos;,&apos;cannondale&apos;,&apos;redline&apos;,&apos;specialized&apos;]</span><br><span class="line"></span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><h5 id="1-访问列表元素"><a href="#1-访问列表元素" class="headerlink" title="1.访问列表元素"></a>1.访问列表元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(bicycles[0])</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">trek</span><br></pre></td></tr></table></figure><h5 id="2-索引从0而不是1开始"><a href="#2-索引从0而不是1开始" class="headerlink" title="2.索引从0而不是1开始"></a>2.索引从0而不是1开始</h5><h4 id="2-修改，添加和删除元素"><a href="#2-修改，添加和删除元素" class="headerlink" title="2.修改，添加和删除元素"></a>2.修改，添加和删除元素</h4><h5 id="1-修改列表元素"><a href="#1-修改列表元素" class="headerlink" title="1.修改列表元素"></a>1.修改列表元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line">names[0] = &apos;zhangsanfeng&apos;</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsanfeng&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>#####2.列表中添加元素</p><ul><li>在列表末尾添加元素</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">names.append(&apos;qianda&apos;)</span><br><span class="line">print(names)</span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">[&apos;zhangsanfeng&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;qianda&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cars = []</span><br><span class="line">cars.append(&apos;honda&apos;)</span><br><span class="line">cars.append(&apos;honda2&apos;)</span><br><span class="line">cars.append(&apos;honda3&apos;)</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">[&apos;honda&apos;, &apos;honda2&apos;, &apos;honda3&apos;]</span><br></pre></td></tr></table></figure><ul><li><p>在列表中插入元素    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars.insert(0,&apos;honda0&apos;)</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;honda0&apos;, &apos;honda&apos;, &apos;honda2&apos;, &apos;honda3&apos;]</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-2-3列表中删除元素"><a href="#3-2-3列表中删除元素" class="headerlink" title="3.2.3列表中删除元素"></a>3.2.3列表中删除元素</h5><ul><li>使用del语句删除元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">del nicks[0]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><ul><li>使用方法pop()删除元素<br>有时候要将元素从列表中删除，并接着使用它的值,方法pop()可删除列表末尾的元素，并让你能够接着使用它。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">poped_nicks = nicks.pop();</span><br><span class="line">print(nicks)</span><br><span class="line">print(poped_nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;]</span><br><span class="line">zhaoliu</span><br></pre></td></tr></table></figure><ul><li>弹出列表中任何位置处的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">poped_nicks = nicks.pop(0)</span><br><span class="line">print(&apos;The first name is &apos;+poped_nicks.title()+&apos;.&apos;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">The first name is Zhangsan.</span><br></pre></td></tr></table></figure><p>如果不确定使用del语句还是pop()方法，有一个简单的标准：如果你要从列表中删除的一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()</p><ul><li>根据值删除元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.remove(&apos;lisi&apos;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><h4 id="3-组织列表"><a href="#3-组织列表" class="headerlink" title="3.组织列表"></a>3.组织列表</h4><h5 id="1-使用方法sort-对列表进行永久性排序–按字母排序"><a href="#1-使用方法sort-对列表进行永久性排序–按字母排序" class="headerlink" title="1.使用方法sort()对列表进行永久性排序–按字母排序"></a>1.使用方法sort()对列表进行永久性排序–按字母排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.sort();</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhangsan&apos;, &apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">还可以按字母顺序相反的顺序排列列表元素，只需要向sort()方法传递参数reverse = True</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.sort(reverse = True);</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;lisi&apos;]</span><br></pre></td></tr></table></figure><h5 id="2-使用方法sorted-对列表进行临时排序–按字母排序"><a href="#2-使用方法sorted-对列表进行临时排序–按字母排序" class="headerlink" title="2.使用方法sorted()对列表进行临时排序–按字母排序"></a>2.使用方法sorted()对列表进行临时排序–按字母排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(sorted(nicks))</span><br><span class="line"></span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhangsan&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">还可以相反顺序临时排序</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(sorted(nicks,reverse = True))</span><br><span class="line"></span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;lisi&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><h5 id="3-倒着打印列表-按元素反转列表排序"><a href="#3-倒着打印列表-按元素反转列表排序" class="headerlink" title="3.倒着打印列表,按元素反转列表排序"></a>3.倒着打印列表,按元素反转列表排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.reverse()</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;wangwu&apos;, &apos;lisi&apos;, &apos;zhangsan&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复原来的排列顺序，只需要再次调用reverse()</span><br></pre></td></tr></table></figure><h5 id="4-确定列表的长度"><a href="#4-确定列表的长度" class="headerlink" title="4.确定列表的长度"></a>4.确定列表的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(len(nicks))</span><br><span class="line"></span><br><span class="line">得到：4</span><br></pre></td></tr></table></figure><p>####4.使用列表时避免索引错误<br>注意元素的个数，另外访问最后一个元素时，都可使用索引-1,倒数第2个可以使用索引-2,依次类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks[-1])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">zhaoliu</span><br></pre></td></tr></table></figure><h3 id="4-操作列表"><a href="#4-操作列表" class="headerlink" title="4.操作列表"></a>4.操作列表</h3><h4 id="1-遍历整个列表"><a href="#1-遍历整个列表" class="headerlink" title="1.遍历整个列表"></a>1.遍历整个列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line"></span><br><span class="line">for cat in cats:</span><br><span class="line">for dog in dogs</span><br><span class="line">for item in list_of_items</span><br><span class="line"></span><br><span class="line">使用单数和复数的式名称可帮助判断代码段处理的是单个列表元素还是整个列表。</span><br></pre></td></tr></table></figure><h5 id="1-在for循坏环中执行更多的操作"><a href="#1-在for循坏环中执行更多的操作" class="headerlink" title="1.在for循坏环中执行更多的操作"></a>1.在for循坏环中执行更多的操作</h5><p>在每条记录中打印一条消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">Zhaoliu, welcome to china</span><br></pre></td></tr></table></figure><p><strong>执行多行代码，这里需要注意一下，接下来的代码都是需要缩进的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br></pre></td></tr></table></figure><p>#####2.在for循环结束后执行一些操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;print all message and print finish!&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line"></span><br><span class="line">可以看到最后一条要打印的消息只打印一次，最后一条没有缩进，因此只打印一次</span><br></pre></td></tr></table></figure></p><p>####2.避免缩进错误</p><ul><li>忘记缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">  File &quot;/Users/liuking/Documents/python/python_learn/test.py&quot;, line 22</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure><ul><li>忘记缩进额外的代码行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">其实想打印两行的消息，结果只打印了一行，print(&quot;hello,python&quot;) 忘记缩进了，结果只是最后一条打印了这条消息</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br></pre></td></tr></table></figure><ul><li>不必要的缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message = &apos;hello python world&apos;</span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">  File &quot;/Users/liuking/Documents/python/python_learn/test.py&quot;, line 20</span><br><span class="line">    print(message)</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><ul><li>循环后不必要的缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">第三个打印的消息没有缩进，结果每一行都被打印出来了。</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;print all message and print finish!&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br></pre></td></tr></table></figure><ul><li>遗漏了冒号<br>漏掉了冒号，python不知道程序意欲何为。</li></ul><h4 id="3-创建数值列表"><a href="#3-创建数值列表" class="headerlink" title="3.创建数值列表"></a>3.创建数值列表</h4><h5 id="1-使用函数range"><a href="#1-使用函数range" class="headerlink" title="1.使用函数range()"></a>1.使用函数range()</h5><p>函数range()让你能够轻松地生成一系列的数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">只打印了1〜4 函数range()从指定的第一个值开始数，并在到达你指定的你第二个值后停止。</span><br></pre></td></tr></table></figure><p>#####2.使用range()创建数字列表<br>要创建数字列表，可使用函数list()将range()的结果直接转换为列表，如果将range()作为list()的参数，输出将为一个数字列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(1,6))</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>把10个整数的平方加入列表中，并打印出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line">numbers = range(1,11)</span><br><span class="line">for number in numbers:</span><br><span class="line">    squares.append(number**2)</span><br><span class="line"></span><br><span class="line">print(squares)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>#####3.对数字列表执行简单的统计计算<br>最小值，最大值，求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">digits = [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">print(min(digits))</span><br><span class="line">print(max(digits))</span><br><span class="line">print(sum(digits))</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">45</span><br></pre></td></tr></table></figure><h4 id="4-使用列表的一部分"><a href="#4-使用列表的一部分" class="headerlink" title="4.使用列表的一部分"></a>4.使用列表的一部分</h4><h5 id="1-切片"><a href="#1-切片" class="headerlink" title="1.切片"></a>1.切片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks[0:3])  前一个数从0开始，后一个数从1开始数</span><br><span class="line">print(nicks[2:3])  从2开始，截止到第4个元素</span><br><span class="line">print(nicks[2:])  从2开始，没有指定截止数据，直接数到末尾</span><br><span class="line">print(nicks[:2])  没有指定开始，默认从0开始</span><br><span class="line">print(nicks[:])    没有指定开始，也没有指定结束的，直接复制整个列表</span><br><span class="line">print(nicks[-2:])  从倒数第2个开始</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;]</span><br><span class="line">[&apos;wangwu&apos;]</span><br><span class="line">[&apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><h5 id="2-遍历切片"><a href="#2-遍历切片" class="headerlink" title="2.遍历切片"></a>2.遍历切片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">for nick in nicks[0:3]:</span><br><span class="line">    print(nick.title())</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan</span><br><span class="line">Lisi</span><br><span class="line">Wangwu</span><br></pre></td></tr></table></figure><h5 id="3-复制列表—需要特别注意了"><a href="#3-复制列表—需要特别注意了" class="headerlink" title="3.复制列表—需要特别注意了"></a>3.复制列表—需要特别注意了</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">nicks_copy = nicks[:]</span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>为了核实我们确实有两个列表，<br>我们可以再添加一下东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">nicks_copy = nicks[:]</span><br><span class="line"></span><br><span class="line">nicks.append(&apos;zhangsanfeng&apos;)</span><br><span class="line">nicks_copy.append(&apos;zhangwuji&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangwuji&apos;]</span><br></pre></td></tr></table></figure><p>如果我们只是简单的nicks赋值给nicks_copy就不能得到两个列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">nicks_copy = nicks;</span><br><span class="line"></span><br><span class="line">nicks.append(&apos;zhangsanfeng&apos;)</span><br><span class="line">nicks_copy.append(&apos;zhangwuji&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;, &apos;zhangwuji&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;, &apos;zhangwuji&apos;]</span><br><span class="line"></span><br><span class="line">因为nicks和nicks_copy都指向同一个列表，所以都打印出了相同的列表，这里要特别注意</span><br></pre></td></tr></table></figure><h4 id="5-元组"><a href="#5-元组" class="headerlink" title="5.元组"></a>5.元组</h4><p>python将不能修改的值称为不可变的，而不可变的列表被称为元组。有的时候需要创建一系列不可修改的元素，元组可以满足这种需要。</p><ul><li>定义元组</li></ul><p>元组看起来像列表，但使用圆括号而不是方括号来标识，定义元组后，就可以使用索引来访问其元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">point = (200,50,300,90)</span><br><span class="line">print(point[0])</span><br><span class="line">print(point[1])</span><br><span class="line">print(point[2])</span><br><span class="line">print(point[-1])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br></pre></td></tr></table></figure><ul><li>遍历元组中的所有值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">points = (200,50,300,90)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br></pre></td></tr></table></figure><ul><li>修改元组变量<br>虽然不能修改元组的元素，但可以给存储元组的变量赋值。重新定义整个元组。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;original data&quot;)</span><br><span class="line">points = (200,50,300,90)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line"></span><br><span class="line">print(&quot;\nmodify data&quot;)</span><br><span class="line">points = (1,2,3,4)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">original data</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br><span class="line"></span><br><span class="line">modify data</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5.if语句"></a>5.if语句</h3><h4 id="1-条件测试"><a href="#1-条件测试" class="headerlink" title="1.条件测试"></a>1.条件测试</h4><ul><li>检查相等用‘==’</li><li>检查不相等用‘!=’</li><li>检查多个条件<ol><li>使用and检查多个条件：要检查是否两个条件都为True,可使用关键字and将两个条件测试合而为一；如果每个测试都通过了，整个表达式为就为True,如果至少有一个测试没有通过，则整个表达式为False</li><li>使用or检查多个条件:至少有一个条件满足，就能通过整修测试，仅当两个测试都没有通过时，使用or的表达式才为False</li></ol></li><li>检查特定值是否包含在列表中，使用关键字in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request_topping = [&apos;mushrooms&apos;,&apos;onions&apos;,&apos;pineapple&apos;]</span><br><span class="line">print(&apos;mushrooms&apos; in request_topping)</span><br><span class="line">print(&apos;mush&apos; in request_topping)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li>检查特定值是否不包含在列表中,使用关键字not in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request_topping = [&apos;mushrooms&apos;,&apos;onions&apos;,&apos;pineapple&apos;]</span><br><span class="line">print(&apos;mushrooms&apos; not in request_topping)</span><br><span class="line">print(&apos;mush&apos; not in request_topping)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>####2.if语句 主要注意的是代码缩进，</p><ul><li>if</li><li>if-else</li><li>if-elif-else</li><li>多个elif代码块</li><li>省略else代码块</li></ul><h3 id="6-字典"><a href="#6-字典" class="headerlink" title="6.字典"></a>6.字典</h3><h4 id="1-字典的简单使用"><a href="#1-字典的简单使用" class="headerlink" title="1.字典的简单使用"></a>1.字典的简单使用</h4><p>在Python中字典是一系列的键值对，每一个键都与一个值相关联，与键相关联的值可以是数字，字符串，列表，乃至字典。</p><ul><li>访问字典的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&apos;color&apos;:&apos;green&apos;,&apos;point&apos;:5&#125;</span><br><span class="line">print(alien_0[&apos;color&apos;])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">green</span><br></pre></td></tr></table></figure><ul><li>添加键值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&apos;color&apos;:&apos;green&apos;,&apos;point&apos;:5&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[&apos;x_point&apos;] = 250</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;, &apos;point&apos;: 5&#125;</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;, &apos;y_point&apos;: 100, &apos;x_point&apos;: 250, &apos;point&apos;: 5&#125;</span><br></pre></td></tr></table></figure><ul><li>先创建一个空字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[&apos;x_point&apos;] = 250</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;y_point&apos;: 100, &apos;x_point&apos;: 250&#125;</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[&apos;y_point&apos;] = 1000</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;y_point&apos;: 100&#125;</span><br><span class="line">&#123;&apos;y_point&apos;: 1000&#125;</span><br></pre></td></tr></table></figure><ul><li>删除-键值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&apos;color&apos;:&apos;green&apos;,&apos;point&apos;:5&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">del alien_0[&apos;point&apos;]</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;, &apos;point&apos;: 5&#125;</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-遍历字典"><a href="#2-遍历字典" class="headerlink" title="2.遍历字典"></a>2.遍历字典</h4><ul><li>遍历所有的键值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line">for value in values.items():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">for key,value in values.items():</span><br><span class="line">    print(&quot;\nkey:&quot;+key)</span><br><span class="line">    print(&quot;value:&quot;+value)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">(&apos;1&apos;, &apos;one&apos;)</span><br><span class="line">(&apos;3&apos;, &apos;three&apos;)</span><br><span class="line">(&apos;2&apos;, &apos;two&apos;)</span><br><span class="line">(&apos;4&apos;, &apos;four&apos;)</span><br><span class="line"></span><br><span class="line">key:1</span><br><span class="line">value:one</span><br><span class="line"></span><br><span class="line">key:3</span><br><span class="line">value:three</span><br><span class="line"></span><br><span class="line">key:2</span><br><span class="line">value:two</span><br><span class="line"></span><br><span class="line">key:4</span><br><span class="line">value:four</span><br></pre></td></tr></table></figure><h5 id="1-遍历字典中所有的键"><a href="#1-遍历字典中所有的键" class="headerlink" title="1.遍历字典中所有的键"></a>1.遍历字典中所有的键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in values.keys():</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="2-遍历字典中所有的值"><a href="#2-遍历字典中所有的值" class="headerlink" title="2.遍历字典中所有的值"></a>2.遍历字典中所有的值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in values.values():</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">one</span><br><span class="line">three</span><br><span class="line">two</span><br><span class="line">four</span><br></pre></td></tr></table></figure><h5 id="3-按顺序遍历字典中所有键"><a href="#3-按顺序遍历字典中所有键" class="headerlink" title="3.按顺序遍历字典中所有键"></a>3.按顺序遍历字典中所有键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;first&apos;:&apos;one&apos;,&apos;second&apos;:&apos;two&apos;,&apos;three&apos;:&apos;three&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in sorted(values.keys()):</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">three</span><br></pre></td></tr></table></figure><p>完</p><h3 id="7-用户输入和while循环"><a href="#7-用户输入和while循环" class="headerlink" title="7.用户输入和while循环"></a>7.用户输入和while循环</h3><h4 id="1-函数input-工作原理"><a href="#1-函数input-工作原理" class="headerlink" title="1.函数input()工作原理"></a>1.函数input()工作原理</h4><p><strong>注意：用户输入只能从终端运行，不能直接通过sublime来运行。</strong></p><p>os x系统从终端运行python程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. liukingdeMacBook-Pro:~ liuking$ cd Desktop</span><br><span class="line">2. liukingdeMacBook-Pro:Desktop liuking$ ls</span><br><span class="line">3. input.py</span><br><span class="line">4. python3 input.py</span><br><span class="line">5. 输出得到结果</span><br><span class="line">6.</span><br></pre></td></tr></table></figure><p>首先：写一段python 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;Please enter your name: &quot;)</span><br><span class="line">print(&quot;Hello,&quot;+name)</span><br><span class="line"></span><br><span class="line">在终端中运行得到：</span><br><span class="line"></span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">Please enter your name: kobe bryant</span><br><span class="line">Hello,kobe bryant</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p><strong>多行输入展示：</strong></p><p>多行展示可以用+=来追加字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prompt = &quot;If you tell us who you are,we can personalize the message you see.&quot;</span><br><span class="line">prompt += &quot;\nWhat is your first name?&quot;</span><br><span class="line">name = input(prompt)</span><br><span class="line"></span><br><span class="line">print(&quot;\n Hello,&quot;+name)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">If you tell us who you are,we can personalize the message you see.</span><br><span class="line">What is your first name?zhang</span><br><span class="line"></span><br><span class="line">Hello,zhang</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ol><li>使用int()来获取数值输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">height = input(&quot;How tall are you ,in inches? &quot;)</span><br><span class="line">height = int(height)</span><br><span class="line"></span><br><span class="line">if height &gt;= 36:</span><br><span class="line">    print(&quot;\n you&apos;re tall enought to ride&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;\nyou&apos;ll be able to ride when you&apos;re a little older.&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">How tall are you ,in inches? 43</span><br><span class="line"></span><br><span class="line">you&apos;re tall enought to ride</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ </span><br><span class="line"></span><br><span class="line">注意这里使用了int()把数据类型转换了一下，</span><br></pre></td></tr></table></figure><ol><li>求模运算符</li></ol><p>求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5%3</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 6%2</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-Whil循环"><a href="#2-Whil循环" class="headerlink" title="2.Whil循环"></a>2.Whil循环</h4><h5 id="1-使用While循环"><a href="#1-使用While循环" class="headerlink" title="1.使用While循环"></a>1.使用While循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">number = input(&quot;遍历你输入的数据:&quot;)</span><br><span class="line">number = int(number)</span><br><span class="line">begin = int(0)</span><br><span class="line">while begin &lt;= number:</span><br><span class="line">    print(begin)</span><br><span class="line">    begin += 1;</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">遍历你输入的数据:10</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="2-让用户选择何时退出"><a href="#2-让用户选择何时退出" class="headerlink" title="2.让用户选择何时退出"></a>2.让用户选择何时退出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">promt = &quot;\nTell me something and I will repeat it back to you:&quot;</span><br><span class="line">promt += &quot;\n Enter &apos;quit&apos;  to end the program.&quot;</span><br><span class="line">message = &quot;&quot;</span><br><span class="line"></span><br><span class="line">while message != &apos;quit&apos;:</span><br><span class="line">    message = input(promt)</span><br><span class="line">    if message != &apos;quit&apos;:</span><br><span class="line">        print(message)</span><br><span class="line">    </span><br><span class="line">终端运行得到：</span><br><span class="line">liukingdeMacBook-Pro:DeskTop liuking$ python3 input.py</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: NBA</span><br><span class="line">NBA</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: CBA</span><br><span class="line">CBA</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: quit</span><br><span class="line">liukingdeMacBook-Pro:DeskTop liuking$</span><br></pre></td></tr></table></figure><p><strong>其它使用方式：</strong></p><ul><li>使用boolean 标记来判断</li><li>使用break退出循环</li><li>使用continue</li></ul><h4 id="3-使用While循环来处理列表和字典"><a href="#3-使用While循环来处理列表和字典" class="headerlink" title="3.使用While循环来处理列表和字典"></a>3.使用While循环来处理列表和字典</h4><h5 id="1-在列表之间移动元素"><a href="#1-在列表之间移动元素" class="headerlink" title="1.在列表之间移动元素"></a>1.在列表之间移动元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line">while unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(&quot;verifying User:&quot;+current_user)</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示所有已验证用户</span><br></pre></td></tr></table></figure><p>print(“\n The following users have been confirmed: “)<br>for user in confirmed_users:<br>    print(user.title())</p><p>得到：<br>verifying User:three<br>verifying User:two<br>verifying User:one</p><p>The following users have been confirmed:<br>Three<br>Two<br>One</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#####2.使用用户输入来填充字典</span><br></pre></td></tr></table></figure><p>responses = {}</p><h1 id="设置一个标志，指出调查是否继续"><a href="#设置一个标志，指出调查是否继续" class="headerlink" title="设置一个标志，指出调查是否继续"></a>设置一个标志，指出调查是否继续</h1><p>polling_active = True</p><p>while polling_active:</p><pre><code># 提示输入被调查者的名字和回答name = input(&quot;\nWhat is your name?&quot;)response = input(&quot;Which mountain would you like to climb someday?&quot;)# 将答案存在字典中responses[name] = response# 看看是否还有人要参加调查repeat = input(&quot;would you like to let another person respond?(Y/N)&quot;)if repeat == &apos;N&apos;:    polling_active = False</code></pre><h1 id="调查结果，显示结果"><a href="#调查结果，显示结果" class="headerlink" title="调查结果，显示结果"></a>调查结果，显示结果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;\n----Poll results-----&quot;)</span><br><span class="line">for name,response in responses.items():</span><br><span class="line">    print(name+&quot; would like to climb &quot;+ response+&quot;.&quot;)</span><br><span class="line">    </span><br><span class="line">在终端运行得到：</span><br><span class="line"></span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line"></span><br><span class="line">What is your name?Kobe</span><br><span class="line">Which mountain would you like to climb someday?武当山    </span><br><span class="line">would you like to let another person respond?(Y/N)Y</span><br><span class="line"></span><br><span class="line">What is your name?姚明</span><br><span class="line">Which mountain would you like to climb someday?灵山    </span><br><span class="line">would you like to let another person respond?(Y/N)N</span><br><span class="line"></span><br><span class="line">----Poll results-----</span><br><span class="line">Kobe would like to climb 武当山.</span><br><span class="line">姚明 would like to climb 灵山.</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p>完。</p><h3 id="1-起步-1"><a href="#1-起步-1" class="headerlink" title="1.起步"></a>1.起步</h3><h3 id="2-变量和简单数据类型-1"><a href="#2-变量和简单数据类型-1" class="headerlink" title="2.变量和简单数据类型"></a>2.变量和简单数据类型</h3><h4 id="1-变量-1"><a href="#1-变量-1" class="headerlink" title="1.变量"></a>1.变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = &quot;hello world python&quot;</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><h4 id="2-命名-1"><a href="#2-命名-1" class="headerlink" title="2.命名"></a>2.命名</h4><h5 id="1-命名与使用-1"><a href="#1-命名与使用-1" class="headerlink" title="1.命名与使用"></a>1.命名与使用</h5><h5 id="2-使用变量时避免命名错误-1"><a href="#2-使用变量时避免命名错误-1" class="headerlink" title="2.使用变量时避免命名错误"></a>2.使用变量时避免命名错误</h5><h4 id="3-字符串-1"><a href="#3-字符串-1" class="headerlink" title="3.字符串"></a>3.字符串</h4><h5 id="1-使用方法修改字符串的大小写-1"><a href="#1-使用方法修改字符串的大小写-1" class="headerlink" title="1.使用方法修改字符串的大小写"></a>1.使用方法修改字符串的大小写</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;ada lovelace&apos;</span><br><span class="line">print(name.title())</span><br><span class="line"></span><br><span class="line">输出得到：</span><br><span class="line">Ada Lovelace</span><br></pre></td></tr></table></figure><p>title()以首字母大写的方式显示每个单词，即每个单词的首字母都改为大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><h5 id="2-拼接字符串"><a href="#2-拼接字符串" class="headerlink" title="2.拼接字符串"></a>2.拼接字符串</h5><p>用“+” 来拼接字符串</p><p>“\t,\n”来空格与换行</p><h5 id="3-删除空白-1"><a href="#3-删除空白-1" class="headerlink" title="3.删除空白"></a>3.删除空白</h5><ol><li>rstrip() 删除末尾的空白</li><li>lstrip() 删除头部的空白</li><li>strip() 删除字符串两端的空白</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msg = &apos; python &apos;</span><br><span class="line">print(msg.rstrip())</span><br><span class="line">print(msg.lstrip())</span><br><span class="line">print(msg.strip())</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line">python</span><br><span class="line">python </span><br><span class="line">python</span><br></pre></td></tr></table></figure><p>#####4.使用字符串避免语法错误<br>单引号与单引号一对，<br>双引号与双引号是一对，<br>一般要成对出现，且。</p><p>####4.使用函数str()避免类型错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 23</span><br><span class="line">msg = &quot;Happy &quot;+str(age)+&quot; rd Birthday&quot;  # 必须使用str()否则python识别不了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure></p><h3 id="3-列表简介-1"><a href="#3-列表简介-1" class="headerlink" title="3.列表简介"></a>3.列表简介</h3><h4 id="1-列表是什么-1"><a href="#1-列表是什么-1" class="headerlink" title="1.列表是什么"></a>1.列表是什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycles = [&apos;trek&apos;,&apos;cannondale&apos;,&apos;redline&apos;,&apos;specialized&apos;]</span><br><span class="line"></span><br><span class="line">print(bicycles)</span><br></pre></td></tr></table></figure><h5 id="1-访问列表元素-1"><a href="#1-访问列表元素-1" class="headerlink" title="1.访问列表元素"></a>1.访问列表元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(bicycles[0])</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">trek</span><br></pre></td></tr></table></figure><h5 id="2-索引从0而不是1开始-1"><a href="#2-索引从0而不是1开始-1" class="headerlink" title="2.索引从0而不是1开始"></a>2.索引从0而不是1开始</h5><h4 id="2-修改，添加和删除元素-1"><a href="#2-修改，添加和删除元素-1" class="headerlink" title="2.修改，添加和删除元素"></a>2.修改，添加和删除元素</h4><h5 id="1-修改列表元素-1"><a href="#1-修改列表元素-1" class="headerlink" title="1.修改列表元素"></a>1.修改列表元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">names =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line">names[0] = &apos;zhangsanfeng&apos;</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsanfeng&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>#####2.列表中添加元素</p><ul><li>在列表末尾添加元素</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">names.append(&apos;qianda&apos;)</span><br><span class="line">print(names)</span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">[&apos;zhangsanfeng&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;qianda&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cars = []</span><br><span class="line">cars.append(&apos;honda&apos;)</span><br><span class="line">cars.append(&apos;honda2&apos;)</span><br><span class="line">cars.append(&apos;honda3&apos;)</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line">[&apos;honda&apos;, &apos;honda2&apos;, &apos;honda3&apos;]</span><br></pre></td></tr></table></figure><ul><li><p>在列表中插入元素    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cars.insert(0,&apos;honda0&apos;)</span><br><span class="line">print(cars)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;honda0&apos;, &apos;honda&apos;, &apos;honda2&apos;, &apos;honda3&apos;]</span><br></pre></td></tr></table></figure></li></ul><p>#####3.2.3列表中删除元素    </p><ul><li>使用del语句删除元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">del nicks[0]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><ul><li>使用方法pop()删除元素<br>有时候要将元素从列表中删除，并接着使用它的值,方法pop()可删除列表末尾的元素，并让你能够接着使用它。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">poped_nicks = nicks.pop();</span><br><span class="line">print(nicks)</span><br><span class="line">print(poped_nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;]</span><br><span class="line">zhaoliu</span><br></pre></td></tr></table></figure><ul><li>弹出列表中任何位置处的元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">poped_nicks = nicks.pop(0)</span><br><span class="line">print(&apos;The first name is &apos;+poped_nicks.title()+&apos;.&apos;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">The first name is Zhangsan.</span><br></pre></td></tr></table></figure><p>如果不确定使用del语句还是pop()方法，有一个简单的标准：如果你要从列表中删除的一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()</p><ul><li>根据值删除元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.remove(&apos;lisi&apos;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>####3.组织列表</p><p>#####1.使用方法sort()对列表进行永久性排序–按字母排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.sort();</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhangsan&apos;, &apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">还可以按字母顺序相反的顺序排列列表元素，只需要向sort()方法传递参数reverse = True</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.sort(reverse = True);</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;lisi&apos;]</span><br></pre></td></tr></table></figure></p><h5 id="2-使用方法sorted-对列表进行临时排序–按字母排序-1"><a href="#2-使用方法sorted-对列表进行临时排序–按字母排序-1" class="headerlink" title="2.使用方法sorted()对列表进行临时排序–按字母排序"></a>2.使用方法sorted()对列表进行临时排序–按字母排序</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(sorted(nicks))</span><br><span class="line"></span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhangsan&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">还可以相反顺序临时排序</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(sorted(nicks,reverse = True))</span><br><span class="line"></span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;zhangsan&apos;, &apos;wangwu&apos;, &apos;lisi&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>#####3.倒着打印列表,按元素反转列表排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">nicks.reverse()</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhaoliu&apos;, &apos;wangwu&apos;, &apos;lisi&apos;, &apos;zhangsan&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复原来的排列顺序，只需要再次调用reverse()</span><br></pre></td></tr></table></figure><h5 id="4-确定列表的长度-1"><a href="#4-确定列表的长度-1" class="headerlink" title="4.确定列表的长度"></a>4.确定列表的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(len(nicks))</span><br><span class="line"></span><br><span class="line">得到：4</span><br></pre></td></tr></table></figure><p>####4.使用列表时避免索引错误<br>注意元素的个数，另外访问最后一个元素时，都可使用索引-1,倒数第2个可以使用索引-2,依次类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks[-1])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">zhaoliu</span><br></pre></td></tr></table></figure><h3 id="4-操作列表-1"><a href="#4-操作列表-1" class="headerlink" title="4.操作列表"></a>4.操作列表</h3><h4 id="1-遍历整个列表-1"><a href="#1-遍历整个列表-1" class="headerlink" title="1.遍历整个列表"></a>1.遍历整个列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">zhangsan</span><br><span class="line">lisi</span><br><span class="line">wangwu</span><br><span class="line">zhaoliu</span><br><span class="line"></span><br><span class="line">for cat in cats:</span><br><span class="line">for dog in dogs</span><br><span class="line">for item in list_of_items</span><br><span class="line"></span><br><span class="line">使用单数和复数的式名称可帮助判断代码段处理的是单个列表元素还是整个列表。</span><br></pre></td></tr></table></figure><h5 id="1-在for循坏环中执行更多的操作-1"><a href="#1-在for循坏环中执行更多的操作-1" class="headerlink" title="1.在for循坏环中执行更多的操作"></a>1.在for循坏环中执行更多的操作</h5><p>在每条记录中打印一条消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">Zhaoliu, welcome to china</span><br></pre></td></tr></table></figure><p><strong>执行多行代码，这里需要注意一下，接下来的代码都是需要缩进的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br></pre></td></tr></table></figure><p>#####2.在for循环结束后执行一些操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">print(&quot;print all message and print finish!&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line"></span><br><span class="line">可以看到最后一条要打印的消息只打印一次，最后一条没有缩进，因此只打印一次</span><br></pre></td></tr></table></figure></p><p>####2.避免缩进错误</p><ul><li>忘记缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">  File &quot;/Users/liuking/Documents/python/python_learn/test.py&quot;, line 22</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">        ^</span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure><ul><li>忘记缩进额外的代码行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">其实想打印两行的消息，结果只打印了一行，print(&quot;hello,python&quot;) 忘记缩进了，结果只是最后一条打印了这条消息</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br></pre></td></tr></table></figure><ul><li>不必要的缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message = &apos;hello python world&apos;</span><br><span class="line">    print(message)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">  File &quot;/Users/liuking/Documents/python/python_learn/test.py&quot;, line 20</span><br><span class="line">    print(message)</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><ul><li>循环后不必要的缩进</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">第三个打印的消息没有缩进，结果每一行都被打印出来了。</span><br><span class="line"></span><br><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">for nick in nicks:</span><br><span class="line">    print(nick.title()+&quot;, welcome to china&quot;)</span><br><span class="line">    print(&quot;hello,python&quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;print all message and print finish!&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Lisi, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Wangwu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br><span class="line">Zhaoliu, welcome to china</span><br><span class="line">hello,python</span><br><span class="line">print all message and print finish!</span><br></pre></td></tr></table></figure><ul><li>遗漏了冒号<br>漏掉了冒号，python不知道程序意欲何为。</li></ul><h4 id="3-创建数值列表-1"><a href="#3-创建数值列表-1" class="headerlink" title="3.创建数值列表"></a>3.创建数值列表</h4><h5 id="1-使用函数range-1"><a href="#1-使用函数range-1" class="headerlink" title="1.使用函数range()"></a>1.使用函数range()</h5><p>函数range()让你能够轻松地生成一系列的数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">只打印了1〜4 函数range()从指定的第一个值开始数，并在到达你指定的你第二个值后停止。</span><br></pre></td></tr></table></figure><p>#####2.使用range()创建数字列表<br>要创建数字列表，可使用函数list()将range()的结果直接转换为列表，如果将range()作为list()的参数，输出将为一个数字列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = list(range(1,6))</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>把10个整数的平方加入列表中，并打印出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line">numbers = range(1,11)</span><br><span class="line">for number in numbers:</span><br><span class="line">    squares.append(number**2)</span><br><span class="line"></span><br><span class="line">print(squares)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>#####3.对数字列表执行简单的统计计算<br>最小值，最大值，求和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">digits = [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">print(min(digits))</span><br><span class="line">print(max(digits))</span><br><span class="line">print(sum(digits))</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">0</span><br><span class="line">9</span><br><span class="line">45</span><br></pre></td></tr></table></figure><h4 id="4-使用列表的一部分-1"><a href="#4-使用列表的一部分-1" class="headerlink" title="4.使用列表的一部分"></a>4.使用列表的一部分</h4><h5 id="1-切片-1"><a href="#1-切片-1" class="headerlink" title="1.切片"></a>1.切片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">print(nicks[0:3])  前一个数从0开始，后一个数从1开始数</span><br><span class="line">print(nicks[2:3])  从2开始，截止到第4个元素</span><br><span class="line">print(nicks[2:])  从2开始，没有指定截止数据，直接数到末尾</span><br><span class="line">print(nicks[:2])  没有指定开始，默认从0开始</span><br><span class="line">print(nicks[:])    没有指定开始，也没有指定结束的，直接复制整个列表</span><br><span class="line">print(nicks[-2:])  从倒数第2个开始</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;]</span><br><span class="line">[&apos;wangwu&apos;]</span><br><span class="line">[&apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;]</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">[&apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>#####2.遍历切片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">for nick in nicks[0:3]:</span><br><span class="line">    print(nick.title())</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">Zhangsan</span><br><span class="line">Lisi</span><br><span class="line">Wangwu</span><br></pre></td></tr></table></figure></p><h5 id="3-复制列表—需要特别注意了-1"><a href="#3-复制列表—需要特别注意了-1" class="headerlink" title="3.复制列表—需要特别注意了"></a>3.复制列表—需要特别注意了</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">nicks_copy = nicks[:]</span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;]</span><br></pre></td></tr></table></figure><p>为了核实我们确实有两个列表，<br>我们可以再添加一下东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line">nicks_copy = nicks[:]</span><br><span class="line"></span><br><span class="line">nicks.append(&apos;zhangsanfeng&apos;)</span><br><span class="line">nicks_copy.append(&apos;zhangwuji&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangwuji&apos;]</span><br></pre></td></tr></table></figure><p>如果我们只是简单的nicks赋值给nicks_copy就不能得到两个列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nicks =[&apos;zhangsan&apos;,&apos;lisi&apos;,&apos;wangwu&apos;,&apos;zhaoliu&apos;]</span><br><span class="line"></span><br><span class="line">nicks_copy = nicks;</span><br><span class="line"></span><br><span class="line">nicks.append(&apos;zhangsanfeng&apos;)</span><br><span class="line">nicks_copy.append(&apos;zhangwuji&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;original nicks&quot;)</span><br><span class="line">print(nicks)</span><br><span class="line"></span><br><span class="line">print(&quot;copy nicks&quot;)</span><br><span class="line">print(nicks_copy)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">original nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;, &apos;zhangwuji&apos;]</span><br><span class="line">copy nicks</span><br><span class="line">[&apos;zhangsan&apos;, &apos;lisi&apos;, &apos;wangwu&apos;, &apos;zhaoliu&apos;, &apos;zhangsanfeng&apos;, &apos;zhangwuji&apos;]</span><br><span class="line"></span><br><span class="line">因为nicks和nicks_copy都指向同一个列表，所以都打印出了相同的列表，这里要特别注意</span><br></pre></td></tr></table></figure><p>####5.元组<br>python将不能修改的值称为不可变的，而不可变的列表被称为元组。有的时候需要创建一系列不可修改的元素，元组可以满足这种需要。</p><ul><li>定义元组</li></ul><p>元组看起来像列表，但使用圆括号而不是方括号来标识，定义元组后，就可以使用索引来访问其元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">point = (200,50,300,90)</span><br><span class="line">print(point[0])</span><br><span class="line">print(point[1])</span><br><span class="line">print(point[2])</span><br><span class="line">print(point[-1])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br></pre></td></tr></table></figure><ul><li>遍历元组中的所有值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">points = (200,50,300,90)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br></pre></td></tr></table></figure><ul><li>修改元组变量<br>虽然不能修改元组的元素，但可以给存储元组的变量赋值。重新定义整个元组。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;original data&quot;)</span><br><span class="line">points = (200,50,300,90)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line"></span><br><span class="line">print(&quot;\nmodify data&quot;)</span><br><span class="line">points = (1,2,3,4)</span><br><span class="line">for point in points:</span><br><span class="line">    print(point)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">original data</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">300</span><br><span class="line">90</span><br><span class="line"></span><br><span class="line">modify data</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="5-if语句-1"><a href="#5-if语句-1" class="headerlink" title="5.if语句"></a>5.if语句</h3><h4 id="1-条件测试-1"><a href="#1-条件测试-1" class="headerlink" title="1.条件测试"></a>1.条件测试</h4><ul><li>检查相等用‘==’</li><li>检查不相等用‘!=’</li><li>检查多个条件<ol><li>使用and检查多个条件：要检查是否两个条件都为True,可使用关键字and将两个条件测试合而为一；如果每个测试都通过了，整个表达式为就为True,如果至少有一个测试没有通过，则整个表达式为False</li><li>使用or检查多个条件:至少有一个条件满足，就能通过整修测试，仅当两个测试都没有通过时，使用or的表达式才为False</li></ol></li><li>检查特定值是否包含在列表中，使用关键字in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request_topping = [&apos;mushrooms&apos;,&apos;onions&apos;,&apos;pineapple&apos;]</span><br><span class="line">print(&apos;mushrooms&apos; in request_topping)</span><br><span class="line">print(&apos;mush&apos; in request_topping)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li>检查特定值是否不包含在列表中,使用关键字not in</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request_topping = [&apos;mushrooms&apos;,&apos;onions&apos;,&apos;pineapple&apos;]</span><br><span class="line">print(&apos;mushrooms&apos; not in request_topping)</span><br><span class="line">print(&apos;mush&apos; not in request_topping)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="2-if语句-主要注意的是代码缩进，"><a href="#2-if语句-主要注意的是代码缩进，" class="headerlink" title="2.if语句 主要注意的是代码缩进，"></a>2.if语句 主要注意的是代码缩进，</h4><ul><li>if</li><li>if-else</li><li>if-elif-else</li><li>多个elif代码块</li><li>省略else代码块</li></ul><h3 id="6-字典-1"><a href="#6-字典-1" class="headerlink" title="6.字典"></a>6.字典</h3><h4 id="1-字典的简单使用-1"><a href="#1-字典的简单使用-1" class="headerlink" title="1.字典的简单使用"></a>1.字典的简单使用</h4><p>在Python中字典是一系列的键值对，每一个键都与一个值相关联，与键相关联的值可以是数字，字符串，列表，乃至字典。</p><ul><li>访问字典的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&apos;color&apos;:&apos;green&apos;,&apos;point&apos;:5&#125;</span><br><span class="line">print(alien_0[&apos;color&apos;])</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">green</span><br></pre></td></tr></table></figure><ul><li>添加键值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&apos;color&apos;:&apos;green&apos;,&apos;point&apos;:5&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[&apos;x_point&apos;] = 250</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;, &apos;point&apos;: 5&#125;</span><br><span class="line">&#123;&apos;color&apos;: &apos;green&apos;, &apos;y_point&apos;: 100, &apos;x_point&apos;: 250, &apos;point&apos;: 5&#125;</span><br></pre></td></tr></table></figure><ul><li>先创建一个空字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[&apos;x_point&apos;] = 250</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;y_point&apos;: 100, &apos;x_point&apos;: 250&#125;</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#125;</span><br><span class="line">alien_0[&apos;y_point&apos;] = 100</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[&apos;y_point&apos;] = 1000</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;&apos;y_point&apos;: 100&#125;</span><br><span class="line">&#123;&apos;y_point&apos;: 1000&#125;</span><br></pre></td></tr></table></figure><ul><li>删除-键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">'color'</span>:<span class="string">'green'</span>,<span class="string">'point'</span>:<span class="number">5</span>&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">'point'</span>]</span><br><span class="line">print(alien_0)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'point'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-遍历字典-1"><a href="#2-遍历字典-1" class="headerlink" title="2.遍历字典"></a>2.遍历字典</h4><ul><li>遍历所有的键值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line">for value in values.items():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">for key,value in values.items():</span><br><span class="line">    print(&quot;\nkey:&quot;+key)</span><br><span class="line">    print(&quot;value:&quot;+value)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">(&apos;1&apos;, &apos;one&apos;)</span><br><span class="line">(&apos;3&apos;, &apos;three&apos;)</span><br><span class="line">(&apos;2&apos;, &apos;two&apos;)</span><br><span class="line">(&apos;4&apos;, &apos;four&apos;)</span><br><span class="line"></span><br><span class="line">key:1</span><br><span class="line">value:one</span><br><span class="line"></span><br><span class="line">key:3</span><br><span class="line">value:three</span><br><span class="line"></span><br><span class="line">key:2</span><br><span class="line">value:two</span><br><span class="line"></span><br><span class="line">key:4</span><br><span class="line">value:four</span><br></pre></td></tr></table></figure><h5 id="1-遍历字典中所有的键-1"><a href="#1-遍历字典中所有的键-1" class="headerlink" title="1.遍历字典中所有的键"></a>1.遍历字典中所有的键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in values.keys():</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h5 id="2-遍历字典中所有的值-1"><a href="#2-遍历字典中所有的值-1" class="headerlink" title="2.遍历字典中所有的值"></a>2.遍历字典中所有的值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;1&apos;:&apos;one&apos;,&apos;2&apos;:&apos;two&apos;,&apos;3&apos;:&apos;three&apos;,&apos;4&apos;:&apos;four&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in values.values():</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">one</span><br><span class="line">three</span><br><span class="line">two</span><br><span class="line">four</span><br></pre></td></tr></table></figure><h5 id="3-按顺序遍历字典中所有键-1"><a href="#3-按顺序遍历字典中所有键-1" class="headerlink" title="3.按顺序遍历字典中所有键"></a>3.按顺序遍历字典中所有键</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&apos;first&apos;:&apos;one&apos;,&apos;second&apos;:&apos;two&apos;,&apos;three&apos;:&apos;three&apos;&#125;</span><br><span class="line"></span><br><span class="line">for value in sorted(values.keys()):</span><br><span class="line">    print(value)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">first</span><br><span class="line">second</span><br><span class="line">three</span><br></pre></td></tr></table></figure><p>完</p><h3 id="7-用户输入和while循环-1"><a href="#7-用户输入和while循环-1" class="headerlink" title="7.用户输入和while循环"></a>7.用户输入和while循环</h3><h4 id="1-函数input-工作原理-1"><a href="#1-函数input-工作原理-1" class="headerlink" title="1.函数input()工作原理"></a>1.函数input()工作原理</h4><p><strong>注意：用户输入只能从终端运行，不能直接通过sublime来运行。</strong></p><p>os x系统从终端运行python程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. liukingdeMacBook-Pro:~ liuking$ cd Desktop</span><br><span class="line">2. liukingdeMacBook-Pro:Desktop liuking$ ls</span><br><span class="line">3. input.py</span><br><span class="line">4. python3 input.py</span><br><span class="line">5. 输出得到结果</span><br><span class="line">6.</span><br></pre></td></tr></table></figure><p>首先：写一段python 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = input(&quot;Please enter your name: &quot;)</span><br><span class="line">print(&quot;Hello,&quot;+name)</span><br><span class="line"></span><br><span class="line">在终端中运行得到：</span><br><span class="line"></span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">Please enter your name: kobe bryant</span><br><span class="line">Hello,kobe bryant</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p><strong>多行输入展示：</strong></p><p>多行展示可以用+=来追加字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">prompt = &quot;If you tell us who you are,we can personalize the message you see.&quot;</span><br><span class="line">prompt += &quot;\nWhat is your first name?&quot;</span><br><span class="line">name = input(prompt)</span><br><span class="line"></span><br><span class="line">print(&quot;\n Hello,&quot;+name)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">If you tell us who you are,we can personalize the message you see.</span><br><span class="line">What is your first name?zhang</span><br><span class="line"></span><br><span class="line">Hello,zhang</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p>注意以下几点：</p><ol><li>使用int()来获取数值输入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">height = input(&quot;How tall are you ,in inches? &quot;)</span><br><span class="line">height = int(height)</span><br><span class="line"></span><br><span class="line">if height &gt;= 36:</span><br><span class="line">    print(&quot;\n you&apos;re tall enought to ride&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;\nyou&apos;ll be able to ride when you&apos;re a little older.&quot;)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">How tall are you ,in inches? 43</span><br><span class="line"></span><br><span class="line">you&apos;re tall enought to ride</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ </span><br><span class="line"></span><br><span class="line">注意这里使用了int()把数据类型转换了一下，</span><br></pre></td></tr></table></figure><ol><li>求模运算符</li></ol><p>求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5%3</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 6%2</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-Whil循环-1"><a href="#2-Whil循环-1" class="headerlink" title="2.Whil循环"></a>2.Whil循环</h4><h5 id="1-使用While循环-1"><a href="#1-使用While循环-1" class="headerlink" title="1.使用While循环"></a>1.使用While循环</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">number = input(&quot;遍历你输入的数据:&quot;)</span><br><span class="line">number = int(number)</span><br><span class="line">begin = int(0)</span><br><span class="line">while begin &lt;= number:</span><br><span class="line">    print(begin)</span><br><span class="line">    begin += 1;</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line">遍历你输入的数据:10</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="2-让用户选择何时退出-1"><a href="#2-让用户选择何时退出-1" class="headerlink" title="2.让用户选择何时退出"></a>2.让用户选择何时退出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">promt = &quot;\nTell me something and I will repeat it back to you:&quot;</span><br><span class="line">promt += &quot;\n Enter &apos;quit&apos;  to end the program.&quot;</span><br><span class="line">message = &quot;&quot;</span><br><span class="line"></span><br><span class="line">while message != &apos;quit&apos;:</span><br><span class="line">    message = input(promt)</span><br><span class="line">    if message != &apos;quit&apos;:</span><br><span class="line">        print(message)</span><br><span class="line">    </span><br><span class="line">终端运行得到：</span><br><span class="line">liukingdeMacBook-Pro:DeskTop liuking$ python3 input.py</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: NBA</span><br><span class="line">NBA</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: CBA</span><br><span class="line">CBA</span><br><span class="line"></span><br><span class="line">Tell me something and I will repeat it back to you:</span><br><span class="line">Enter &apos;quit&apos;  to end the program: quit</span><br><span class="line">liukingdeMacBook-Pro:DeskTop liuking$</span><br></pre></td></tr></table></figure><p><strong>其它使用方式：</strong></p><ul><li>使用boolean 标记来判断</li><li>使用break退出循环</li><li>使用continue</li></ul><h4 id="3-使用While循环来处理列表和字典-1"><a href="#3-使用While循环来处理列表和字典-1" class="headerlink" title="3.使用While循环来处理列表和字典"></a>3.使用While循环来处理列表和字典</h4><h5 id="1-在列表之间移动元素-1"><a href="#1-在列表之间移动元素-1" class="headerlink" title="1.在列表之间移动元素"></a>1.在列表之间移动元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&apos;one&apos;,&apos;two&apos;,&apos;three&apos;]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line">while unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(&quot;verifying User:&quot;+current_user)</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 显示所有已验证用户</span><br><span class="line">```python</span><br><span class="line">print(&quot;\n The following users have been confirmed: &quot;)</span><br><span class="line">for user in confirmed_users:</span><br><span class="line">    print(user.title())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">verifying User:three</span><br><span class="line">verifying User:two</span><br><span class="line">verifying User:one</span><br><span class="line"></span><br><span class="line">The following users have been confirmed: </span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br></pre></td></tr></table></figure><h5 id="2-使用用户输入来填充字典"><a href="#2-使用用户输入来填充字典" class="headerlink" title="2.使用用户输入来填充字典"></a>2.使用用户输入来填充字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    <span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">    name = input(<span class="string">"\nWhat is your name?"</span>)</span><br><span class="line">    response = input(<span class="string">"Which mountain would you like to climb someday?"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将答案存在字典中</span></span><br><span class="line">    responses[name] = response</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 看看是否还有人要参加调查</span></span><br><span class="line">    repeat = input(<span class="string">"would you like to let another person respond?(Y/N)"</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">'N'</span>:</span><br><span class="line">        polling_active = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调查结果，显示结果</span></span><br><span class="line">```python</span><br><span class="line">print(<span class="string">"\n----Poll results-----"</span>)</span><br><span class="line"><span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line">    print(name+<span class="string">" would like to climb "</span>+ response+<span class="string">"."</span>)</span><br><span class="line">    </span><br><span class="line">在终端运行得到：</span><br><span class="line"></span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$ python3 input.py</span><br><span class="line"></span><br><span class="line">What is your name?Kobe</span><br><span class="line">Which mountain would you like to climb someday?武当山    </span><br><span class="line">would you like to let another person respond?(Y/N)Y</span><br><span class="line"></span><br><span class="line">What is your name?姚明</span><br><span class="line">Which mountain would you like to climb someday?灵山    </span><br><span class="line">would you like to let another person respond?(Y/N)N</span><br><span class="line"></span><br><span class="line">----Poll results-----</span><br><span class="line">Kobe would like to climb 武当山.</span><br><span class="line">姚明 would like to climb 灵山.</span><br><span class="line">liukingdeMacBook-Pro:Desktop liuking$</span><br></pre></td></tr></table></figure><p>完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-起步&quot;&gt;&lt;a href=&quot;#1-起步&quot; class=&quot;headerlink&quot; title=&quot;1.起步&quot;&gt;&lt;/a&gt;1.起步&lt;/h3&gt;&lt;h3 id=&quot;2-变量和简单数据类型&quot;&gt;&lt;a href=&quot;#2-变量和简单数据类型&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Python基础教程2</title>
    <link href="http://yoursite.com/2018/01/24/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B2/"/>
    <id>http://yoursite.com/2018/01/24/Python基础教程2/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:40:27.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h3><h4 id="1-定义函数："><a href="#1-定义函数：" class="headerlink" title="1.定义函数："></a>1.定义函数：</h4><ol><li>使用关键字def来告诉python你要定义一个函数</li><li>接着指出函数名：如下面函数名是–greet_user</li><li>()是必须带上的，这里可以可以传递一些参数，也可以不传</li><li>以:结尾，且与后面所有的缩进构成了函数体</li><li>调用函数直接写上函数名，如果有参数记得带上参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 无参数的函数：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""显示简单的函数体"""</span></span><br><span class="line">    print(<span class="string">"Hello Python"</span>)</span><br><span class="line">    </span><br><span class="line">greet_user()</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Hello Python</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 有参数的函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="string">"""显示简单的函数体"""</span></span><br><span class="line">    print(<span class="string">"Hello Python:  "</span>+username)</span><br><span class="line">    </span><br><span class="line">greet_user(<span class="string">'kobe'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Hello Python:  kobe</span><br></pre></td></tr></table></figure><h5 id="1-实参与形参"><a href="#1-实参与形参" class="headerlink" title="1.实参与形参"></a>1.实参与形参</h5><p>在函数greet_user()中，变量username是一个形参—函数完成其工作所需要的一项信息.在代码greet_user(‘kobe’)中，值’kobe’是一个实参。</p><h4 id="2-传递实参"><a href="#2-传递实参" class="headerlink" title="2.传递实参"></a>2.传递实参</h4><h5 id="1-位置实参"><a href="#1-位置实参" class="headerlink" title="1.位置实参"></a>1.位置实参</h5><p>需要注意参数的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type,pet_name)</span>:</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span>+ animal_type + <span class="string">"'s name is "</span>+pet_name.title()+<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(<span class="string">'dog'</span>,<span class="string">'james'</span>)</span><br><span class="line">describe_pet(<span class="string">'dog'</span>,<span class="string">'iverson'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">'s name is James.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I have a dog.</span></span><br><span class="line"><span class="string">My dog'</span>s name <span class="keyword">is</span> Iverson.</span><br></pre></td></tr></table></figure><h5 id="2-关键字实参"><a href="#2-关键字实参" class="headerlink" title="2.关键字实参"></a>2.关键字实参</h5><p>关键字实参是传递给函数的名称-值对,直接在实参中将名称和值关联起来，因此向函数传递实参时不会混淆。与参数顺序无关。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type,pet_name)</span>:</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span>+ animal_type + <span class="string">"'s name is "</span>+pet_name.title()+<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet(pet_name = <span class="string">'kkkk'</span>,animal_type = <span class="string">'cat'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">I have a cat.</span><br><span class="line">My cat<span class="string">'s name is Kkkk.</span></span><br></pre></td></tr></table></figure><h5 id="3-默认值"><a href="#3-默认值" class="headerlink" title="3.默认值"></a>3.默认值</h5><p>编写函数可以给每个形参指定默认值，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意已经设置了默认值的参数要放在后面，</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet2</span><span class="params">(pet_name,animal_type = <span class="string">'dog'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"\nI have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span>+ animal_type + <span class="string">"'s name is "</span>+pet_name.title()+<span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet2(<span class="string">'kobe'</span>)</span><br><span class="line">describe_pet2(pet_name = <span class="string">'james'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">'s name is Kobe.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I have a dog.</span></span><br><span class="line"><span class="string">My dog'</span>s name <span class="keyword">is</span> James.</span><br></pre></td></tr></table></figure><h4 id="3-返回值"><a href="#3-返回值" class="headerlink" title="3.返回值"></a>3.返回值</h4><h5 id="1-返回简单值"><a href="#1-返回简单值" class="headerlink" title="1.返回简单值"></a>1.返回简单值</h5><p>调用返回值的函数时，需要提供一个变量，用于存储返回的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name,last_name)</span>:</span></span><br><span class="line">    <span class="string">"""返回整洁的姓名"""</span></span><br><span class="line">    full_name = first_name + <span class="string">'-'</span> +last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">'kobe'</span>,<span class="string">'bryant'</span>)</span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">Kobe-Bryant</span><br></pre></td></tr></table></figure><h5 id="2-让实参变成可选的"><a href="#2-让实参变成可选的" class="headerlink" title="2. 让实参变成可选的"></a>2. 让实参变成可选的</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name,last_name,middle_name= <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">"""返回整洁的姓名"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name +<span class="string">'-'</span>+middle_name+<span class="string">'-'</span>+last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">'-'</span> +last_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">'kobe'</span>,<span class="string">'bryant'</span>)</span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">'kobe'</span>,<span class="string">'bryant'</span>,<span class="string">'vboy'</span>)</span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">Kobe-Bryant</span><br><span class="line">Kobe-Vboy-Bryant</span><br></pre></td></tr></table></figure><h5 id="3-返回字典"><a href="#3-返回字典" class="headerlink" title="3. 返回字典"></a>3. 返回字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name,last_name,age = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="string">"""返回一个字典，其中包含有关一个人的信息"""</span></span><br><span class="line">    person = &#123;<span class="string">'first'</span>:first_name,<span class="string">'last'</span>:last_name&#125;</span><br><span class="line">    <span class="keyword">if</span> age:</span><br><span class="line">        person[<span class="string">'age'</span>] = age</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">musician = build_person(<span class="string">'kobe'</span>,<span class="string">'bryant'</span>,<span class="number">23</span>)</span><br><span class="line">print(musician)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">23</span>, <span class="string">'last'</span>: <span class="string">'bryant'</span>, <span class="string">'first'</span>: <span class="string">'kobe'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="4-结合使用函数和while循环"><a href="#4-结合使用函数和while循环" class="headerlink" title="4.结合使用函数和while循环"></a>4.结合使用函数和while循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ef get_formatted_name(first_name,last_name,middle_name= <span class="string">''</span>):</span><br><span class="line">    <span class="string">"""返回整洁的姓名"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name +<span class="string">'-'</span>+middle_name+<span class="string">'-'</span>+last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">'-'</span> +last_name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"\nPlease tell me you name:"</span>)</span><br><span class="line">    first_name = input(<span class="string">"first Name: "</span>)</span><br><span class="line">    last_name = input(<span class="string">"last Name: "</span>)</span><br><span class="line">    formatted_name = get_formatted_name(first_name,last_name)</span><br><span class="line">    print(formatted_name)</span><br><span class="line"></span><br><span class="line">    msg = input(<span class="string">"do you want to exit (Y/N)"</span>)</span><br><span class="line">    <span class="keyword">if</span> msg.upper() == <span class="string">'Y'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">终端运行得到：</span><br><span class="line">liukingdeMacBook-Pro:desktop liuking$ python3 input.py</span><br><span class="line"></span><br><span class="line">Please tell me you name:</span><br><span class="line">first Name: kobe</span><br><span class="line">last Name: bryant</span><br><span class="line">Kobe-Bryant</span><br><span class="line">do you want to exit (Y/N)n</span><br><span class="line"></span><br><span class="line">Please tell me you name:</span><br><span class="line">first Name: chris </span><br><span class="line">last Name: paul</span><br><span class="line">Chris-Paul</span><br><span class="line">do you want to exit (Y/N)y</span><br><span class="line">liukingdeMacBook-Pro:desktop liuking$</span><br></pre></td></tr></table></figure><h4 id="4-传递列表"><a href="#4-传递列表" class="headerlink" title="4. 传递列表"></a>4. 传递列表</h4><h5 id="1-在函数中修改列表"><a href="#1-在函数中修改列表" class="headerlink" title="1.在函数中修改列表"></a>1.在函数中修改列表</h5><ul><li>没有使用函数处理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有使用函数是这样的。</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""将未确认的用户，进行认证。"""</span></span><br><span class="line">unconfirmed_users = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    <span class="string">"""处理用户认证操作"""</span></span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(<span class="string">"verifying User:"</span>+current_user)</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line"><span class="string">"""打印认证用户"""</span></span><br><span class="line">print(<span class="string">"\nThe following users have been confirmed: "</span>)</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    print(user.title())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">verifying User:three</span><br><span class="line">verifying User:two</span><br><span class="line">verifying User:one</span><br><span class="line"></span><br><span class="line">The following users have been confirmed: </span><br><span class="line">Three</span><br><span class="line">Two</span><br><span class="line">One</span><br></pre></td></tr></table></figure><ul><li>使用函数处理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&apos;first&apos;,&apos;second&apos;,&apos;third&apos;]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;处理用户认证操作&quot;&quot;&quot;</span><br><span class="line">def deal_verify_user(unconfirmed_users,confirmed_users):</span><br><span class="line">    while unconfirmed_users:</span><br><span class="line">        &quot;&quot;&quot;处理用户认证操作&quot;&quot;&quot;</span><br><span class="line">        current_user = unconfirmed_users.pop()</span><br><span class="line">        print(&quot;verifying User:&quot;+current_user)</span><br><span class="line">        confirmed_users.append(current_user)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def print_verify_user(confirmed_users):</span><br><span class="line">    for user in confirmed_users:</span><br><span class="line">        print(user.title())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deal_verify_user(unconfirmed_users,confirmed_users)</span><br><span class="line"></span><br><span class="line">print(&quot;\nThe following users have been confirmed: &quot;)</span><br><span class="line">print_verify_user(confirmed_users)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">verifying User:third</span><br><span class="line">verifying User:second</span><br><span class="line">verifying User:first</span><br><span class="line"></span><br><span class="line">The following users have been confirmed: </span><br><span class="line">Third</span><br><span class="line">Second</span><br><span class="line">First</span><br></pre></td></tr></table></figure><p>上面我们发现得到一样的结果，但使用了函数处理可以做到复用，且逻辑比较清晰，易于扩展。</p><h5 id="2-禁止函数修改列表。"><a href="#2-禁止函数修改列表。" class="headerlink" title="2.禁止函数修改列表。"></a>2.禁止函数修改列表。</h5><p>如果我们像备份之前的数据，我们就不能修改未认证的用户，这个时候我们可以用切片来处理我们的操作了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">'first'</span>,<span class="string">'second'</span>,<span class="string">'third'</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="string">"""处理用户认证操作"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deal_verify_user</span><span class="params">(unconfirmed_users,confirmed_users)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">        <span class="string">"""处理用户认证操作"""</span></span><br><span class="line">        current_user = unconfirmed_users.pop()</span><br><span class="line">        print(<span class="string">"verifying User:"</span>+current_user)</span><br><span class="line">        confirmed_users.append(current_user)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_user</span><span class="params">(confirmed_users)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">        print(user.title())</span><br><span class="line"></span><br><span class="line"><span class="string">"""这里我们将列表的副本传给函数，列表的原始数据不会被修改"""</span></span><br><span class="line">deal_verify_user(unconfirmed_users[:],confirmed_users)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nThe following users have been confirmed: "</span>)</span><br><span class="line">print_user(confirmed_users)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n展示原始数据: "</span>)</span><br><span class="line">print_user(unconfirmed_users)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">verifying User:third</span><br><span class="line">verifying User:second</span><br><span class="line">verifying User:first</span><br><span class="line"></span><br><span class="line">The following users have been confirmed: </span><br><span class="line">Third</span><br><span class="line">Second</span><br><span class="line">First</span><br><span class="line"></span><br><span class="line">展示原始数据: </span><br><span class="line">First</span><br><span class="line">Second</span><br><span class="line">Third</span><br></pre></td></tr></table></figure><h4 id="5-传递任意数量的实参。"><a href="#5-传递任意数量的实参。" class="headerlink" title="5.传递任意数量的实参。"></a>5.传递任意数量的实参。</h4><p>有的时候我们不知道函数需要接受多少个实参，python允许函数从调用语句中收集任意数量的实参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">“”“这里*toppons指定了一个空元组，将收到的所有值都封装在这个这元组中。”“”</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppons)</span>:</span></span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a pizza with the following toppings"</span>)</span><br><span class="line">    <span class="keyword">for</span> top <span class="keyword">in</span> toppons:</span><br><span class="line">        print(<span class="string">"- "</span>+top.title())</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">Making a pizza <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line">- Green Peppers</span><br><span class="line">- Extra Cheese</span><br></pre></td></tr></table></figure><h5 id="1-结合使用位置实参和任意数量实参，"><a href="#1-结合使用位置实参和任意数量实参，" class="headerlink" title="1.结合使用位置实参和任意数量实参，"></a>1.结合使用位置实参和任意数量实参，</h5><p>如果要让函数接受不同类型的实参，必须在函数定义中接纳任意数量实参的形参放在最后。python先匹配位置实参和关键字实参，再匹配任意实参，<strong>所以这里我们把make_pizza(size,*toppons),位置实参在前，任意实参在后。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def make_pizza(size,*toppons):</span><br><span class="line">    &quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot;</span><br><span class="line">    print(&quot;\nMaking a &quot; + str(size) +&quot;-inch pizza with the following toppings&quot;)</span><br><span class="line">    for top in toppons:</span><br><span class="line">        print(&quot;- &quot;+top.title())</span><br><span class="line"></span><br><span class="line">make_pizza(18,&apos;pepperoni&apos;)</span><br><span class="line">make_pizza(33,&apos;pepperoni&apos;,&apos;green peppers&apos;,&apos;extra cheese&apos;)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">Making a 18-inch pizza with the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line"></span><br><span class="line">Making a 33-inch pizza with the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line">- Green Peppers</span><br><span class="line">- Extra Cheese</span><br></pre></td></tr></table></figure><h5 id="2-使用任意数量的关键字实参。"><a href="#2-使用任意数量的关键字实参。" class="headerlink" title="2.使用任意数量的关键字实参。"></a>2.使用任意数量的关键字实参。</h5><p>有时候需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量键值对—调用语句提供了多少就接爱多少。</p><ul><li>注意：使用任意数量的关键字实参需要使用**声明</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first,last,**user_info)</span>:</span></span><br><span class="line">    <span class="string">"""创建一个字典"""</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">info = build_profile(<span class="string">'Kobe'</span>,<span class="string">'bryant'</span>,like = <span class="string">'ball'</span>,age = <span class="number">35</span>)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&#123;<span class="string">'first_name'</span>: <span class="string">'Kobe'</span>, <span class="string">'last_name'</span>: <span class="string">'bryant'</span>, <span class="string">'age'</span>: <span class="number">35</span>, <span class="string">'like'</span>: <span class="string">'ball'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-将函数存储在模块中。"><a href="#6-将函数存储在模块中。" class="headerlink" title="6.将函数存储在模块中。"></a>6.将函数存储在模块中。</h4><p>函数的优点之一是，使用它们可将代码块与主程序分离，通过给函数指定描述性名称，可让主程序容易得多。还可以更进一步，将函数存储在被称为<strong>模块</strong>的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块代码。</p><p>通过将函数存储在独立的文件中，可隐藏程序代码的细节，将重点入在程序的高层逻辑上，还能让你在众多不同的程序中重用函数。将函数存储在独立文件后，可与其它程序员共享这些文件而不是整个程序。知道如何导入函数，还能让你使用其它程序员编写的函数库。</p><h5 id="1-导入整个模块。"><a href="#1-导入整个模块。" class="headerlink" title="1.导入整个模块。"></a>1.导入整个模块。</h5><p>使用import语句导入了名为module_name.py的整个模块，就可使用下面的语法来使用其中任何一个函数。</p><p><code>module_name.function_name()</code>    </p><p>下面我们创建一个input.py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size,*toppons)</span>:</span></span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) +<span class="string">"-inch pizza with the following toppings"</span>)</span><br><span class="line">    <span class="keyword">for</span> top <span class="keyword">in</span> toppons:</span><br><span class="line">        print(<span class="string">"- "</span>+top.title())</span><br></pre></td></tr></table></figure><p>再创建一个test_input.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> input</span><br><span class="line"></span><br><span class="line">input.make_pizza(<span class="number">18</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">input.make_pizza(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">Making a <span class="number">18</span>-inch pizza <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line"></span><br><span class="line">Making a <span class="number">33</span>-inch pizza <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line">- Green Peppers</span><br><span class="line">- Extra Cheese</span><br></pre></td></tr></table></figure><p>上面我们使用import 导入input文件。然后使用文件名input，再调用函数。</p><h5 id="2-导入特定的函数。"><a href="#2-导入特定的函数。" class="headerlink" title="2.导入特定的函数。"></a>2.导入特定的函数。</h5><ul><li><p>还可以导入模块中特写的函数，这种导入方法的语法如下：<br><code>from module_name import function_name</code></p></li><li><p>通过用逗号来分隔函数名，可根据需要从模块中导入任意数量的函数：<br><code>from module_name import function_0,function_1,function_2</code></p></li></ul><p>对于只想导入要使用的函数，代码将类似于下面这样：</p><p><strong>使用这种语法，调用函数时就无需使用句点，由于我们在import语句中显示地导入了函数make_pizza，因此调用它时只需要指定其名称。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> input <span class="keyword">import</span> make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">18</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">可以得到同样的效果。</span><br></pre></td></tr></table></figure><h5 id="3-使用as给函数指定别名。"><a href="#3-使用as给函数指定别名。" class="headerlink" title="3.使用as给函数指定别名。"></a>3.使用as给函数指定别名。</h5><p>有的时候要导入的函数名称可能与程序中现有的名称冲突，或者函数名称太长，可指定简短而独一无二的别名—函数的另一个名称，类似于外号。</p><p>指定别名的通用语法是：<br><code>from module_name import function_name as fn</code></p><p>下面我们可以把上面代码修改一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> input <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line">mp(<span class="number">18</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">mp(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><h5 id="4-使用as给模块指定别名"><a href="#4-使用as给模块指定别名" class="headerlink" title="4.使用as给模块指定别名"></a>4.使用as给模块指定别名</h5><p>还可以给模块指定别名。给模块指定别名通用语法如下：<br><code>import module_name as mn</code><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> input <span class="keyword">as</span> put</span><br><span class="line"></span><br><span class="line">put.make_pizza(<span class="number">18</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">put.make_pizza(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>#####5.导入模块中所有的函数<br>使用星号（<em>） 运算符可以让Python导入模块中所有的函数：<br>`from module_name import </em>`</p><p>首先创建有两个函数的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size,*toppons)</span>:</span></span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) +<span class="string">"-inch pizza with the following toppings"</span>)</span><br><span class="line">    <span class="keyword">for</span> top <span class="keyword">in</span> toppons:</span><br><span class="line">        print(<span class="string">"- "</span>+top.title())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_KFC</span><span class="params">(size,*toppons)</span>:</span></span><br><span class="line">    <span class="string">"""打印顾客点的所有配料"""</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) +<span class="string">"-inch KFC with the following toppings"</span>)</span><br><span class="line">    <span class="keyword">for</span> top <span class="keyword">in</span> toppons:</span><br><span class="line">        print(<span class="string">"- "</span>+top.title())</span><br></pre></td></tr></table></figure><p>再调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> input <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line">make_KFC(<span class="number">33</span>,<span class="string">'pepperoni'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">Making a <span class="number">33</span>-inch pizza <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line">- Green Peppers</span><br><span class="line">- Extra Cheese</span><br><span class="line"></span><br><span class="line">Making a <span class="number">33</span>-inch KFC <span class="keyword">with</span> the following toppings</span><br><span class="line">- Pepperoni</span><br><span class="line">- Green Peppers</span><br><span class="line">- Extra Cheese</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>import语句中星号让Python将模块中每个函数都复制到这个程序文件中，由于导入了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。但使用并非自己编写的大型模块时，最好不要采用这种导入方法：如果模块中有函数的名称与你项目的中使用的名称相同，可能导致意想不到的结果：Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而不是分别导入所有的函数。</p><p><strong>最佳做法：</strong>要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法。这能让代码更清晰，更容易理解和阅读。</p><p>####7.函数编写指南<br>编写函数时，需要牢记几个细节：应给函数指定描述性名称，且只在其中使用小写字母和下划线，描述性名称可帮助你和别人明白代码想要什么，给模块命名时也应按上述约定。<br>给形参指定默认值时，等号两边不要有空格。</p><p><code>def function_name(parameter_0,parameter_1=&#39;devault value&#39;)</code></p><p>对于函数调用中的关键字实参，</p><p><code>function_name(value_0,parameter=&#39;value&#39;)</code></p><p>完</p><h3 id="9-类"><a href="#9-类" class="headerlink" title="9.类"></a>9.类</h3><p>所有的面向对象编辑思想都是一样的，所以这一篇对于是程序员的你一定是非常简单的.</p><h4 id="9-1-创建和使用类"><a href="#9-1-创建和使用类" class="headerlink" title="9.1 创建和使用类"></a>9.1 创建和使用类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟汽车的简单尝试"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self, mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"you can't roll back an odometer!"</span>)</span><br></pre></td></tr></table></figure><p>这里面我就创建了一个一个Car类,不要问我为什么这么写，这就是约定。<br><strong>代码说明</strong><br><code>def __init__(self, make, model, year):</code></p><blockquote><ol><li>这是一个特殊的函数，使用两个下划线标记主要是为了跟其它的普通函数区分开来。 <strong>在java里这个叫构造函数</strong></li><li>里面有带了几个参数来填充属性，还可以添加默认参数，里面我添加了一个<strong>odometer_reading</strong>这个属性</li><li>这里面我添加了两个方法<strong>get_descriptive_name</strong> 和 <strong>update_odometer</strong> 这里面必须传入self，这是对自身的一种引用，另外还可以在后面添加若干参数。</li></ol></blockquote><p>使用类:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">byd = Car(<span class="string">'byd'</span>,<span class="string">'byd tang'</span>,<span class="string">'2017'</span>)        <span class="comment">#实例化Car类</span></span><br><span class="line">str1 = byd.get_descriptive_name()        <span class="comment"># 调用类的方法</span></span><br><span class="line">print(str1.title())</span><br><span class="line"></span><br><span class="line">得到结果</span><br><span class="line"></span><br><span class="line"><span class="number">2017</span> Byd Byd Tang</span><br><span class="line"></span><br><span class="line">再调用一个带参数的方法</span><br><span class="line"></span><br><span class="line">byd.update_odometer(<span class="number">100</span>);</span><br><span class="line">print(<span class="string">'move '</span>+str(byd.odometer_reading)+<span class="string">' miles'</span>)</span><br><span class="line"></span><br><span class="line">得到结果：</span><br><span class="line">move <span class="number">100</span> miles</span><br></pre></td></tr></table></figure></p><h4 id="9-2-继承"><a href="#9-2-继承" class="headerlink" title="9.2 继承"></a>9.2 继承</h4><p>直接在Car这个文件里再写一个子类，电动车类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectriCar</span><span class="params">(Car)</span>:</span>            <span class="comment">#继承Car类</span></span><br><span class="line">    <span class="string">"""电动汽车独特之处"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year, battery_size=<span class="number">100</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性"""</span></span><br><span class="line"></span><br><span class="line">        super().__init__(make, model, year)    <span class="comment">#这里继承父类的属性  和java里的super方法一样</span></span><br><span class="line">        self.battery_size = battery_size        <span class="comment"># 子类有自己的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">descript_batter</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">" kwh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_gas_tank</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"i hava a battery"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectriCar(<span class="string">'tesla'</span>, <span class="string">'model s'</span>, <span class="string">'2016'</span>)</span><br><span class="line"></span><br><span class="line">print(my_tesla.get_descriptive_name())  <span class="comment">#引用父类的描述方法</span></span><br><span class="line"></span><br><span class="line">print(my_tesla.fill_gas_tank())      <span class="comment">#重写子类的电池方法</span></span><br><span class="line"></span><br><span class="line">得到结果：</span><br><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">i hava a battery</span><br></pre></td></tr></table></figure><p>代码说明</p><ol><li>在类名称后的括号中写上父类</li><li>在init方法中使用super方法来继承父类的属性</li><li>子类自动拥有父类全部的方法</li><li>子类可以重写父类方法，但方法名一定要写父类一样.</li></ol><h4 id="9-3-导入类"><a href="#9-3-导入类" class="headerlink" title="9.3 导入类"></a>9.3 导入类</h4><h4 id="9-4-Python标准库"><a href="#9-4-Python标准库" class="headerlink" title="9.4 Python标准库"></a>9.4 Python标准库</h4><h3 id="10-文件和异常"><a href="#10-文件和异常" class="headerlink" title="10.文件和异常"></a>10.文件和异常</h3><h4 id="3-异常"><a href="#3-异常" class="headerlink" title="3.异常"></a>3.异常</h4><p>异常是使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了try-except代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误信息，而不是令用户迷惑的traceback.</p><p>#####1.处理ZeroDivisionError异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(5/0)</span><br></pre></td></tr></table></figure><h5 id="2-使用try-except代码块"><a href="#2-使用try-except代码块" class="headerlink" title="2.使用try-except代码块"></a>2.使用try-except代码块</h5><p>当你认为可能发生了错误时，可编写一个try-except代码块来处理可能引发的异常。</p><p>处理ZeroDivisionError异常的try-except代码块类似于下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure><p>如果程序出现异常，就执行print(“You can’t divide by zero!”),不再是traceback:</p><h5 id="3-使用异常避免崩溃"><a href="#3-使用异常避免崩溃" class="headerlink" title="3.使用异常避免崩溃"></a>3.使用异常避免崩溃</h5><p>发生错误时，如果程序还有工作没有完成，妥善处理错误就尤其重要。这种情况经常会现出现在要求用户提供输入的程序中；如果程序能够妥善地处理无效输入，就能再提示用户提供有效输入，而不至于崩溃。</p><p>下面来一个只执行除法的简单计算器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit. "</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    answer = int(first_number)/int(second_number)</span><br><span class="line">    print(answer)</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:desktop liuking$ python3 input.py</span><br><span class="line">Give me two numbers, <span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number: 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number: 2</span></span><br><span class="line"><span class="string">2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number: 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number: g</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "input.py", line 244, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    answer = int(first_number)/int(second_number)</span></span><br><span class="line"><span class="string">ValueError: invalid literal for int() with base 10: '</span>g<span class="string">'</span></span><br><span class="line"><span class="string">liukingdeMacBook-Pro:desktop liuking$</span></span><br></pre></td></tr></table></figure><h5 id="4-else代码块。"><a href="#4-else代码块。" class="headerlink" title="4. else代码块。"></a>4. else代码块。</h5><p>通过将可能引发错误的代码放在try-except代码块中，可提高这个程序抵御错误的能力，错误是是执行除法运算的代码行导致的，因此我们需要将它放到try-except代码块中。依赖于try代码块成功执行的代码都放到else代码块中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">print(<span class="string">"Give me two numbers, and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit. "</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number: "</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">"you can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">liukingdeMacBook-Pro:desktop liuking$ python3 input.py</span><br><span class="line">Give me two numbers, <span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number: 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number: 3</span></span><br><span class="line"><span class="string">1.6666666666666667</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number: 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number: 0</span></span><br><span class="line"><span class="string">you can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:</span><br></pre></td></tr></table></figure><p>发现异常也能友好的提示给用户。</p><p><strong>try-except-else代码块的工作原理大致如下：</strong>python尝试执行try代码块中的代码;只有可能引发异常的代码才需要放在try语句中。有时候，有一些仅在try代码块成功执行时才需要运行的代码，这些代码应该放在else代码块中。except代码块告诉python，如果它尝试运行try代码块中的代码时引发了指定的异常，该怎么办。 </p><p>通过预测可能发生错误的代码，可编写健壮的程序，它们即便面临无效数据或者缺少资源，也能继续运行，从而能够抵御无意的用户错误和恶意的攻击。</p><p>#####5. 处理FileNotFoundError异常。</p><h4 id="4-存储数据"><a href="#4-存储数据" class="headerlink" title="4.存储数据"></a>4.存储数据</h4><p>一般都是使用模块json来存储数据。</p><h5 id="1-使用json-dump-写入数据和json-load-加载数据。"><a href="#1-使用json-dump-写入数据和json-load-加载数据。" class="headerlink" title="1.使用json.dump()写入数据和json.load()加载数据。"></a>1.使用json.dump()写入数据和json.load()加载数据。</h5><p>使用json.dump()来存储(写入)数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">22</span>,<span class="number">44</span>]</span><br><span class="line">file_name = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure><p>我们先要导入模块json，再执行，最后可以打开numbers.json文件，看到其内容与python中一样。</p><p>再使用json.load()读取numbers.json文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">file_name = &apos;numbers.json&apos;</span><br><span class="line">with open(file_name) as f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">[2, 3, 5, 7, 9, 22, 44]</span><br></pre></td></tr></table></figure><p>与我们期望的一致。</p><h3 id="11-测试代码"><a href="#11-测试代码" class="headerlink" title="11.测试代码"></a>11.测试代码</h3><h4 id="1-测试"><a href="#1-测试" class="headerlink" title="1.测试"></a>1.测试</h4><h5 id="1-单元测试和测试用例"><a href="#1-单元测试和测试用例" class="headerlink" title="1.单元测试和测试用例"></a>1.单元测试和测试用例</h5><p>Python标准库中的模块unitest提供了代码测试工具。单元测试用于测试函数的某个方面是否有问题；测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</p><h5 id="2-可通过的测试"><a href="#2-可通过的测试" class="headerlink" title="2.可通过的测试"></a>2.可通过的测试</h5><p>要为函数编写测试用例，可先导入模块unittest以及要测试的函数，再创建一个继承unittest.TestCase的类，并编写一系列方法对函数行为的不同方面进行测试。</p><p>首先我们来写一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first,last)</span>:</span></span><br><span class="line">    <span class="string">"""Generate a neatly formatted full name."""</span></span><br><span class="line">    full_name = first + <span class="string">' '</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></table></figure><p>再写一个测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""测试name_function.py"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""能够正确地处理Janis Joplin这样的姓名吗？"""</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>,<span class="string">'joplin'</span>)</span><br><span class="line">        self.assertEqual(formatted_name,<span class="string">'Janis Joplin'</span>)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li>首先我们导入了模块unittest和要测试的函数get_formatted_name()</li><li>我们创建了一个NameTestCase的类用于包含一系列针对get_formatted_name()的单元测试。可以随便给这个类命名，但最好让它看起来要与测试的函数相关，并包含字样Test。<strong>这个类必须继承unittest.TestCase类</strong></li><li>我们使用了unittest类最有用的功能之一：一个断言方法。断言方法用来核实得到的结果是否与期望的结果一致。</li><li>第1行的句点表明有一个测试通过了，接下来的一行指出Python运行了一个测试，消耗的时候不到0.01s，最后的OK表明该测试用例中的所有单元测试都通过了。</li><li><strong>测试方法名为test-first-last-name(),方法名必须以test_开头，这样它才会在我们测试的时候自动运行。</strong>这个方法名清楚地指出了它测试的是get_formatted_name()的那个行为，这样如果该测试未通过，我们就会马上知道受影响的是那种类型的姓名。在TestCase类中使用很长的方法名是可以的，这些方法的名称必须是描述性的这才能让你明白测试未通过的时的输出，这些方法由python自动调用，你根本不用编写调用它们的代码。</li></ul><h5 id="3-不能通过的测试"><a href="#3-不能通过的测试" class="headerlink" title="3.不能通过的测试"></a>3.不能通过的测试</h5><p>这里我们给出一个不能通过测试的案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first,middle,last)</span>:</span></span><br><span class="line">    <span class="string">"""Generate a neatly formatted full name."""</span></span><br><span class="line">    full_name = first + <span class="string">' '</span> + middle + <span class="string">' '</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">    </span><br><span class="line">再运行一下：</span><br><span class="line"></span><br><span class="line">E</span><br><span class="line">======================================================================</span><br><span class="line">ERROR: test_first_last_name (__main__.NameTestCase)</span><br><span class="line">能够正确地处理Janis Joplin这样的姓名吗？</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/Users/liuking/Desktop/test_name_function.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> test_first_last_name</span><br><span class="line">    formatted_name = get_formatted_name(<span class="string">'janis'</span>,<span class="string">'joplin'</span>)</span><br><span class="line">TypeError: get_formatted_name() takes exactly <span class="number">3</span> arguments (<span class="number">2</span> given)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">FAILED (errors=<span class="number">1</span>)</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s <span class="keyword">with</span> exit code <span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>首先指出测试用例中有一个单元测试导致了错误</li><li>NameTestCase中的test_first_last_name()导致了错误,知道那个测试没有通过至关重要。</li><li>我们看到了Traceback</li></ul><h5 id="4-测试未通过时怎么办"><a href="#4-测试未通过时怎么办" class="headerlink" title="4. 测试未通过时怎么办"></a>4. 测试未通过时怎么办</h5><p>测试未通过时怎么办？如果检查的条件没错，测试通过了意味着函数的行为是对的，而测试未通过意味着你编写的新代码有错，因此测试未通过时，不要修改测试，而应修复导致测试不能通过的代码：检查刚对函数所做的修改，找到导致函数行为不符合预期的修改。</p><p>把刚才的函数代码稍作修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def get_formatted_name(first,last,middle = &apos;&apos;):</span><br><span class="line">    &quot;&quot;&quot;Generate a neatly formatted full name.&quot;&quot;&quot;</span><br><span class="line">    if middle:</span><br><span class="line">        full_name = first + &apos; &apos; + middle + &apos; &apos; + last</span><br><span class="line">    else:</span><br><span class="line">        full_name = first + &apos; &apos; + last</span><br><span class="line"></span><br><span class="line">    return full_name.title()</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 test in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">[Finished in 0.1s]</span><br></pre></td></tr></table></figure><p>又能正确通过测试。</p><p>#####5.添加新测试<br>我们为NamesTestCase再添加一个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line"></span><br><span class="line">import unittest</span><br><span class="line">from name_function import get_formatted_name</span><br><span class="line"></span><br><span class="line">class NameTestCase(unittest.TestCase):</span><br><span class="line">    &quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span><br><span class="line">    </span><br><span class="line">    def test_first_last_name(self):</span><br><span class="line">        &quot;&quot;&quot;能够正确地处理Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span><br><span class="line">        formatted_name = get_formatted_name(&apos;janis&apos;,&apos;joplin&apos;)</span><br><span class="line">        self.assertEqual(formatted_name,&apos;Janis Joplin&apos;)</span><br><span class="line"></span><br><span class="line">    def test_first_last_middle_name(self):</span><br><span class="line">        &quot;&quot;&quot;能够正确地处理Janis Joplin Kobe这样的姓名吗？&quot;&quot;&quot;</span><br><span class="line">        formatted_name = get_formatted_name(&apos;janis&apos;,&apos;Kobe&apos;,&apos;joplin&apos;)</span><br><span class="line">        self.assertEqual(formatted_name,&apos;Janis Joplin Kobe&apos;)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">[Finished in 0.1s]</span><br></pre></td></tr></table></figure><p>####2.测试类</p><p>#####1.各种断言方法<br>常用的断言方法，使用这些方法可核实返回的值等于或不等于预期的值，返回的值为True或False,返回的值在列表中或者不在列表中。只能在继承unittest.TestCase的类中使用这些方法</p><h2 id="unittest-Module中的断言方法"><a href="#unittest-Module中的断言方法" class="headerlink" title="unittest Module中的断言方法"></a>unittest Module中的断言方法</h2><table><thead><tr><th>方法</th><th>用途  </th></tr></thead><tbody><tr><td>assertEqual(a,b)</td><td>核实 a ==b </td></tr><tr><td>assertNotEqual(a,b)</td><td>核实 a !=b </td></tr><tr><td>assertTrue(x)</td><td>核实x为True</td></tr><tr><td>assertFalse(x)</td><td>核实x为False</td></tr><tr><td>assertIn(item,list)</td><td>核实item在list中</td></tr><tr><td>assertNotIn(item,list)</td><td>核实item不在list中 </td></tr></tbody></table><h5 id="2-一个要测试的类"><a href="#2-一个要测试的类" class="headerlink" title="2.一个要测试的类"></a>2.一个要测试的类</h5><p>类的测试与函数的测试相似–你所做的大部分工作都是测试类中方法的行为，但存在一些不同之处，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""收集匿名调查问卷的答案"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, question)</span>:</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示调查问卷"""</span></span><br><span class="line">        print(self.question)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self,new_response)</span>:</span></span><br><span class="line">        <span class="string">"""存储单份调查问卷"""</span></span><br><span class="line">        self.responses.append(new_response);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示收集到的所有答案"""</span></span><br><span class="line">        print(<span class="string">"Survey Results:"</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">'- '</span>+response)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">    ------------------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一人问题，并创建一个表示调查的AnonymousSurvey对象</span></span><br><span class="line">question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">my_survey = AnonymousSurvey(question)</span><br><span class="line"></span><br><span class="line">my_survey.show_question()</span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit.\n"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    response = input(<span class="string">"language: "</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示调查结果：</span></span><br><span class="line">print(<span class="string">"\nThank you to everyone who participated in the survey?"</span>)</span><br><span class="line">my_survey.show_results()</span><br><span class="line"></span><br><span class="line">运行得到：</span><br><span class="line">在终端运行得到：</span><br><span class="line">What language did you first learn to speak?</span><br><span class="line">Enter <span class="string">'q'</span> at any time to quit.</span><br><span class="line"></span><br><span class="line">language: english</span><br><span class="line">language: chinese</span><br><span class="line">language: japanese</span><br><span class="line">language: q</span><br><span class="line"></span><br><span class="line">Thank you to everyone who participated in the survey?</span><br><span class="line">Survey Results:</span><br><span class="line">- english</span><br><span class="line">- chinese</span><br><span class="line">- japanese</span><br></pre></td></tr></table></figure><h5 id="3-测试AnonymousSurvey类"><a href="#3-测试AnonymousSurvey类" class="headerlink" title="3.测试AnonymousSurvey类"></a>3.测试AnonymousSurvey类</h5><p>下面来编写一个测试，对AnonymousSurvey类的行为的一个方面进行验证：如果用户面对调查问题时只提供一个答案，这个答案也能被妥善保存，为此我们将在这个答案被保存后，用方法assertIn()来核实包含在答案列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for ClassName"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"what language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">'english'</span>)</span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">'english'</span>,my_survey.responses)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">unittest.main()</span><br><span class="line"></span><br><span class="line">运行得到：</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">1</span> test <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure><p>这里我们首先导入了模块unittest以及要测试的类AnonymousSurvey，它也继承于unittest.TestCase第一个测试方法验证调查问题的单个答案被存储后，会包含在调查结果列表中。</p><p>只能收集一个答案的调查用途不大，我们来核实用户提供的三个答案，也将它们存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for ClassName"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"what language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">'english'</span>)</span><br><span class="line"></span><br><span class="line">        self.assertIn(<span class="string">'english'</span>,my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        question = <span class="string">"what language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        responses = [<span class="string">'english'</span>,<span class="string">'chinese'</span>,<span class="string">'japanese'</span>]</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> responses:</span><br><span class="line">            self.assertIn(response,my_survey.responses)</span><br><span class="line">        </span><br><span class="line">unittest.main()</span><br><span class="line">        </span><br><span class="line">运行得到：</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure><h5 id="4-方法setUp"><a href="#4-方法setUp" class="headerlink" title="4. 方法setUp()"></a>4. 方法setUp()</h5><p>在unittest.TestCase类包含方法setUp(),让我们只需要创建这些对象一次，并在每个测试方法中使用他们，如果你在TestCase类中包含了方法setUp()，Python将先运行它，再运行各个以test_打头的方法，这样在我们编写的每个测试方法中都可使用方法setUp()中创建的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""创建一个调查对象和一组答案，供使用的测试方法使用。"""</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'chinese'</span>,<span class="string">'english'</span>,<span class="string">'japanese'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="string">"""docstring for ClassName"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.my_survey.store_response(self.responses[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>],self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_responses</span><span class="params">(self)</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.my_survey.store_response(response)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response,self.my_survey.responses)</span><br><span class="line">        </span><br><span class="line">unittest.main()</span><br><span class="line"></span><br><span class="line">运行得到：</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure><p>方法setUp()让测试方法编写起来更容易，可在setUp()方法中创建一系列并设置他们的属性，再在测试方法中直接使用这些实例，相比于在每个测试方法中都都创建并设置其属性，这要容易得多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;8-函数&quot;&gt;&lt;a href=&quot;#8-函数&quot; class=&quot;headerlink&quot; title=&quot;8.函数&quot;&gt;&lt;/a&gt;8.函数&lt;/h3&gt;&lt;h4 id=&quot;1-定义函数：&quot;&gt;&lt;a href=&quot;#1-定义函数：&quot; class=&quot;headerlink&quot; title=&quot;1.定
      
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Pyhyon爬虫牛刀小试</title>
    <link href="http://yoursite.com/2018/01/24/%E7%88%AC%E8%99%AB%E7%89%9B%E5%88%80%E5%B0%8F%E8%AF%95/"/>
    <id>http://yoursite.com/2018/01/24/爬虫牛刀小试/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:41:07.732Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫的抓取方式有好几种，<strong>正则表达式，Lxml(xpath)与Beautiful,</strong>我在网上查了一下资料，了解到三者之间的使用难度与性能</p><p>三种爬虫方式的对比。</p><table><thead><tr><th>抓取方式</th><th>性能</th><th>使用难度</th></tr></thead><tbody><tr><td>正则表达式</td><td>快</td><td>困难</td></tr><tr><td>Lxml</td><td>快</td><td>简单</td></tr><tr><td>BeautifulSoup</td><td>慢</td><td>简单</td></tr></tbody></table><p>这样一比较我我选择了Lxml(xpath)的方式了，虽然有三种方式，但肯定是要选择最好的方式来爬虫，这个道理大家都懂，另外有兴趣的朋友也可以去了解另外两种爬虫方式！</p><p>好了现在来讲讲xpath</p><p>由于Xpath属于lxml模块，所以首先需要安装lxml库，老办法直接在file–&gt;setting—project interpreter 一键添加lxml库。</p><p>####xpath简单用法</p><blockquote><p>from lxml import etree</p><p>s=etree.HTML(源码) #将源码转化为能被XPath匹配的格式</p><p>s.xpath(xpath表达式) #返回为一列表,</p></blockquote><p>####基础语法：</p><blockquote><ol><li>// 双斜杠 定位根节点，会对全文进行扫描，在文档中选取所有符合条件的内容，以列表的形式返回。 </li><li>/ 单斜杠 寻找当前标签路径的下一层路径标签或者对当前路标签内容进行操作 </li><li>/text() 获取当前路径下的文本内容 </li><li>/@xxxx 提取当前路径下标签的属性值 </li><li>| 可选符 使用|可选取若干个路径 如//p | //div 即在当前路径下选取所有符合条件的p标签和div标签。 </li><li>. 点 用来选取当前节点 </li><li>.. 双点 选取当前节点的父节点 </li></ol></blockquote><p><strong>学以致用，方能让我们能快速掌握xpath语法功能。</strong></p><p>我们这次需要爬取豆瓣音乐前250条</p><p>打开豆瓣音乐：<a href="https://music.douban.com/top250" target="_blank" rel="noopener">https://music.douban.com/top250</a></p><p>###获取单条数据</p><p>#####1.获取音乐标题</p><p>右键弹出菜单栏 Copy==&gt; Copy Xpath </p><p>这里我们想获取音乐标题，音乐标题的xpath是：<code>xpath://*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/a</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">title = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/a'</span>)</span><br><span class="line"><span class="keyword">print</span> title</span><br></pre></td></tr></table></figure><p>运行代码：<br>居然是空的。！！！<br>这里需要注意一下，浏览器复制的xpath只能作参考，因为浏览器经常会在自己里面增加多余的tbody标签，我们需要手动把这个标签删除<br>删除中间的/tbody后,是这样的，<br><code>title = s.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tr/td[2]/div/a&#39;)</code><br>然后我们再运行代码。<br>得到：<br><code>&lt;Element a at 0x53d26c8&gt;</code></p><p>说明标题被获取到了。<br>因为要获取标题文本，所以xpath表达式要追加/text()<br><code>title = s.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()&#39;)#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</code></p><p>又因为这个s.xpath返回的是一个集合，且集合中只有一个元素所以我再追加一个[0]<br>新的表达式：<br><code>title = s.xpath(&#39;//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()&#39;)[0]#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text(),再追加[0]</code></p><p>重新运行得到结果：<br>We Sing. We Dance. We Steal Things.<br>正是我们想要的标题。</p><p>#####2.获取音乐评分与评价人数</p><p>老办法，先用右键copy评分的xpath :<code>//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/div/span[2]</code><br>复制评价人数的xpath:<code>//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/div/span[3]/text()</code> </p><p>同样的我们要把tbody去掉，然后重新运行代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">title = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">score = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[2]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">numbers = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[3]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line"><span class="keyword">print</span> title,score,numbers</span><br></pre></td></tr></table></figure></p><p>得到：</p><pre><code>    We Sing. We Dance. We Steal Things.9.1             (                    100395人评价            )</code></pre><p>#####3.获取音乐链接<br>copy标题的xpath，：<code>//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/a</code></p><p>想获取音乐连接href这里需要，获取这个标签属于,/@xxx可以提取当前路径标签下的属性值<br><code>//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[2]/div/a/@href</code></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">href = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/@href'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">title = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">score = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[2]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">numbers = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[3]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line"><span class="keyword">print</span> href,title,score,numbers</span><br></pre></td></tr></table></figure></p><p>运行代码得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://music.douban.com/subject/2995812/ </span><br><span class="line">            We Sing. We Dance. We Steal Things.</span><br><span class="line">        9.1 </span><br><span class="line">                    (</span><br><span class="line">                            100395人评价</span><br><span class="line">                    )</span><br></pre></td></tr></table></figure></p><p>#####5.获取图片地址：<br>找到图片，复制他的xpath地址：<code>//*[@id=&quot;content&quot;]/div/div[1]/div/table[1]/tbody/tr/td[1]/a/img</code></p><p>运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">href = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/@href'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">title = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">score = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[2]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">numbers = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/div/span[3]/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">imgpath = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[1]/a/img/@src'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取文本，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line"><span class="keyword">print</span> href,title,score,numbers,imgpath</span><br></pre></td></tr></table></figure><p>老套路：<br>得到结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://music.douban.com/subject/2995812/ </span><br><span class="line">            We Sing. We Dance. We Steal Things.</span><br><span class="line">        9.1 </span><br><span class="line">                    (</span><br><span class="line">                            100395人评价</span><br><span class="line">                    )</span><br><span class="line">                 https://img3.doubanio.com/spic/s2967252.jpg</span><br></pre></td></tr></table></figure></p><p>但是这只是获取了一条数据，如果获取多条数据呢？</p><p>###获取多条数据</p><p>我们再看第二条数据，第三条数据,第四条数据<br>得到他们的xpath:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">title = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[1]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">title2 = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[2]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">title3 = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[3]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line">title4 = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table[4]/tr/td[2]/div/a/text()'</span>)[<span class="number">0</span>]<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line"><span class="keyword">print</span> title,title2,title3,title4</span><br></pre></td></tr></table></figure></p><p>得到：</p><pre><code>We Sing. We Dance. We Steal Things.Viva La Vida华丽的冒险范特西</code></pre><p>对比他们的xpath，发现只有table序号不一样，我们可以就去掉序号，得到通用的xpath信息：<br>运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">titles = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table/tr/td[2]/div/a/text()'</span>)<span class="comment">#因为要获取标题，所以我需要这个当前路径下的文本，所以使用/text()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> titles:</span><br><span class="line">    <span class="keyword">print</span> title.strip()</span><br></pre></td></tr></table></figure><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">We Sing. We Dance. We Steal Things.</span><br><span class="line">Viva La Vida</span><br><span class="line"></span><br><span class="line">华丽的冒险</span><br><span class="line"></span><br><span class="line">范特西</span><br><span class="line"></span><br><span class="line">後。青春期的詩</span><br><span class="line"></span><br><span class="line">是时候</span><br><span class="line"></span><br><span class="line">Lenka</span><br><span class="line">Start from Here</span><br><span class="line"></span><br><span class="line">旅行的意义</span><br><span class="line">太阳</span><br><span class="line"></span><br><span class="line">Once (Soundtrack)</span><br><span class="line"></span><br><span class="line">Not Going Anywhere</span><br><span class="line"></span><br><span class="line">American Idiot</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">無與倫比的美麗</span><br><span class="line"></span><br><span class="line">亲爱的...我还不知道</span><br><span class="line"></span><br><span class="line">城市</span><br><span class="line"></span><br><span class="line">O</span><br><span class="line">Wake Me Up When September Ends</span><br><span class="line"></span><br><span class="line">叶惠美</span><br><span class="line"></span><br><span class="line">七里香</span><br><span class="line"></span><br><span class="line">21</span><br><span class="line">My Life Will...</span><br><span class="line">寓言</span><br><span class="line">你在烦恼什么</span><br></pre></td></tr></table></figure></p><p>其它的信息如：链接地址，评分，评价人数都可以用同样的办法来获取，现在我同时获取多条数据，因为每页数据是25条，所以：<br>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># coding:utf-8</span><br><span class="line">from lxml import etree</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &apos;https://music.douban.com/top250&apos;</span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line"></span><br><span class="line">hrefs = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/a/@href&apos;)</span><br><span class="line">titles = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/a/text()&apos;)</span><br><span class="line">scores = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/div/span[2]/text()&apos;)</span><br><span class="line">numbers = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/div/span[3]/text()&apos;)</span><br><span class="line">imgs = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[1]/a/img/@src&apos;)</span><br><span class="line"></span><br><span class="line">for i in range(25):</span><br><span class="line">    print hrefs[i],titles[i],scores[i],numbers[i],imgs[i]</span><br></pre></td></tr></table></figure><p>得到：<br>一大批数据了，我就不展示了。有兴趣可以直接copy代码运行.,注意你得装上lxml与requests库.</p><p><strong>我们也发现了问题每一个xpath路径特别长，能不能精简一下呢？</strong></p><p>#####5. 精简一下xpath路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hrefs = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/a/@href&apos;)</span><br><span class="line">titles = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/a/text()&apos;)</span><br><span class="line">scores = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/div/span[2]/text()&apos;)</span><br><span class="line">numbers = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[2]/div/div/span[3]/text()&apos;)</span><br><span class="line">imgs = s.xpath(&apos;//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr/td[1]/a/img/@src&apos;)</span><br></pre></td></tr></table></figure><p>观察发现获取几个关键字段的xpath前缀都是 <code>//*[@id=&quot;content&quot;]/div/div[1]/div/table/tr</code> 那我能不能把这些东西提出来呢，让后面的不同的自己去追加，另外这样写也不用管每个页面到底有多少条数据，只管查就行了。所以代码做了一下精简。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://music.douban.com/top250'</span></span><br><span class="line"></span><br><span class="line">html = requests.get(url).text</span><br><span class="line">s = etree.HTML(html)</span><br><span class="line">trs = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table/tr'</span>)  <span class="comment">#先提取tr之前的节点集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs: <span class="comment">#遍历tr</span></span><br><span class="line">    href = tr.xpath(<span class="string">'./td[2]/div/a/@href'</span>)[<span class="number">0</span>]  <span class="comment">#注意新节点是tr下的节点 </span></span><br><span class="line">    title = tr.xpath(<span class="string">'./td[2]/div/a/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    score = tr.xpath(<span class="string">'./td[2]/div/div/span[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    number = tr.xpath(<span class="string">'./td[2]/div/div/span[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">    img = tr.xpath(<span class="string">'./td[1]/a/img/@src'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">print</span> href,title,score,number,img</span><br></pre></td></tr></table></figure><p>得到的结果和之前是一样的。</p><p>但是，但是，这只是一个页面的数据，我现在想爬取多个页面的数据，怎么办呢？</p><p>###获取个多页面数据.</p><p>观察一下翻页路径：<br><a href="https://music.douban.com/top250?start=0" target="_blank" rel="noopener">https://music.douban.com/top250?start=0</a><br><a href="https://music.douban.com/top250?start=25" target="_blank" rel="noopener">https://music.douban.com/top250?start=25</a><br><a href="https://music.douban.com/top250?start=50" target="_blank" rel="noopener">https://music.douban.com/top250?start=50</a></p><p>有没有发现页面只是后面start参数发生了改变，且增长为每次25，并且250条数据正好是10页。<br>所以我可以遍历这个页面。<br>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">url = <span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(i*<span class="number">25</span>)</span><br><span class="line"><span class="keyword">print</span> url</span><br></pre></td></tr></table></figure></p><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://music.douban.com/top250?start=0</span><br><span class="line">https://music.douban.com/top250?start=25</span><br><span class="line">https://music.douban.com/top250?start=50</span><br><span class="line">https://music.douban.com/top250?start=75</span><br><span class="line">https://music.douban.com/top250?start=100</span><br><span class="line">https://music.douban.com/top250?start=125</span><br><span class="line">https://music.douban.com/top250?start=150</span><br><span class="line">https://music.douban.com/top250?start=175</span><br><span class="line">https://music.douban.com/top250?start=200</span><br><span class="line">https://music.douban.com/top250?start=225</span><br></pre></td></tr></table></figure><p>正是自己要的结果。</p><p>好了最后我们把代码拼装在一起，并注意每个方法的用途。</p><p>###完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取页面地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">     url = <span class="string">'https://music.douban.com/top250?start=&#123;&#125;'</span>.format(i*<span class="number">25</span>)</span><br><span class="line">     scrapyPage(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取每页数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scrapyPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    html = requests.get(url).text</span><br><span class="line">    s = etree.HTML(html)</span><br><span class="line">    trs = s.xpath(<span class="string">'//*[@id="content"]/div/div[1]/div/table/tr'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">        href = tr.xpath(<span class="string">'./td[2]/div/a/@href'</span>)[<span class="number">0</span>]</span><br><span class="line">        title = tr.xpath(<span class="string">'./td[2]/div/a/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        score = tr.xpath(<span class="string">'./td[2]/div/div/span[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        number = tr.xpath(<span class="string">'./td[2]/div/div/span[3]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        img = tr.xpath(<span class="string">'./td[1]/a/img/@src'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> href, title, score, number, img</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  <span class="string">'__main__'</span>:</span><br><span class="line">    getUrl()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爬虫的抓取方式有好几种，&lt;strong&gt;正则表达式，Lxml(xpath)与Beautiful,&lt;/strong&gt;我在网上查了一下资料，了解到三者之间的使用难度与性能&lt;/p&gt;
&lt;p&gt;三种爬虫方式的对比。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;抓取方式&lt;/
      
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫前准备</title>
    <link href="http://yoursite.com/2018/01/24/%E7%88%AC%E8%99%AB%E5%89%8D%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2018/01/24/爬虫前准备/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:42:50.437Z</updated>
    
    <content type="html"><![CDATA[<p>首先说明一下我的爬虫环境是基于<code>py2.x</code>的， 为什么用这个版本呢，因为<code>py2.x</code>的版本支持的多，而且一般会使用<code>py2.x</code>环境，基本在<code>py3.x</code>也没有太大问题，好了，进入正题！</p><p>###urllib 与 urllib2<br> <code>urllib</code>与<code>urllib</code>2是<code>Python</code>内置的，要实现<code>Http</code>请求，以<code>urllib2</code>为主,<code>urllib</code>为辅.</p><p><strong> 构建一个请求与响应模型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line">strUrl = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">response = urllib2.urlopen(strUrl)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">得到：</span><br><span class="line">&lt;div class=&quot;s_tab&quot; id=&quot;s_tab&quot;&gt;</span><br><span class="line">    &lt;b&gt;网页&lt;/b&gt;&lt;a href=&quot;http://news.baidu.com/ns?cl=2&amp;rn=20&amp;tn=news&amp;word=&quot; wdfield=&quot;word&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;news&apos;&#125;)&quot;&gt;新闻&lt;/a&gt;&lt;a href=&quot;http://tieba.baidu.com/f?kw=&amp;fr=wwwt&quot; wdfield=&quot;kw&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;tieba&apos;&#125;)&quot;&gt;贴吧&lt;/a&gt;&lt;a href=&quot;http://zhidao.baidu.com/q?ct=17&amp;pn=0&amp;tn=ikaslist&amp;rn=10&amp;word=&amp;fr=wwwt&quot; wdfield=&quot;word&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;zhidao&apos;&#125;)&quot;&gt;知道&lt;/a&gt;&lt;a href=&quot;http://music.baidu.com/search?fr=ps&amp;ie=utf-8&amp;key=&quot; wdfield=&quot;key&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;music&apos;&#125;)&quot;&gt;音乐&lt;/a&gt;&lt;a href=&quot;http://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;word=&quot; wdfield=&quot;word&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;pic&apos;&#125;)&quot;&gt;图片&lt;/a&gt;&lt;a href=&quot;http://v.baidu.com/v?ct=301989888&amp;rn=20&amp;pn=0&amp;db=0&amp;s=25&amp;ie=utf-8&amp;word=&quot; wdfield=&quot;word&quot;   onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;video&apos;&#125;)&quot;&gt;视频&lt;/a&gt;&lt;a href=&quot;http://map.baidu.com/m?word=&amp;fr=ps01000&quot; wdfield=&quot;word&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;map&apos;&#125;)&quot;&gt;地图&lt;/a&gt;&lt;a href=&quot;http://wenku.baidu.com/search?word=&amp;lm=0&amp;od=0&amp;ie=utf-8&quot; wdfield=&quot;word&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;wenku&apos;&#125;)&quot;&gt;文库&lt;/a&gt;&lt;a href=&quot;//www.baidu.com/more/&quot;  onmousedown=&quot;return c(&#123;&apos;fm&apos;:&apos;tab&apos;,&apos;tab&apos;:&apos;more&apos;&#125;)&quot;&gt;更多»&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样就获取了整个网页内容.<br><strong>说明</strong><br><code>urlopen(strUrl,data,timeout)</code></p><ul><li>第一个参数URL必传的，第二个参数data是访问URL时要传送的数据，第三个timeout是设置超时时间，后面两个参数不是必传的.</li></ul><p><strong>Get与Post传送数据</strong><br>post与get传送数据是两个比较常用的数据传送方式，一般只需要掌握这两种方式就可以了.</p><p><strong>Get方式传送数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">values = &#123;&#125;</span><br><span class="line">values[<span class="string">'username'</span>] = <span class="string">'136xxxx0839'</span></span><br><span class="line">values[<span class="string">'password'</span>] = <span class="string">'123xxx'</span></span><br><span class="line">data = urllib.urlencode(values)<span class="comment">#这里注意转换格式</span></span><br><span class="line">url = <span class="string">'https://accounts.douban.com/login?alias=&amp;redir=https%3A%2F%2Fwww.douban.com%2F&amp;source=index_nav&amp;error=1001'</span></span><br><span class="line">getUrl = url+<span class="string">'?'</span>+data</span><br><span class="line">request = urllib2.Request(getUrl)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="comment"># print response.read()</span></span><br><span class="line"><span class="keyword">print</span> getUrl</span><br><span class="line"></span><br><span class="line">得到：https://accounts.douban.com/login?alias=&amp;redir=https%3A%2F%2Fwww.douban.com%2F&amp;source=index_nav&amp;error=1001?username=136xxxx0839&amp;password=123xxx</span><br></pre></td></tr></table></figure><p><strong>post数据传送方式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;&#125;</span><br><span class="line">values[<span class="string">'username'</span>] = <span class="string">'136xxxx0839'</span></span><br><span class="line">values[<span class="string">'password'</span>] = <span class="string">'123xxx'</span></span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">url = <span class="string">'https://accounts.douban.com/login?alias=&amp;redir=https%3A%2F%2Fwww.douban.com%2F&amp;source=index_nav&amp;error=1001'</span></span><br><span class="line">request = urllib2.Request(url,data)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> response.read()</span><br></pre></td></tr></table></figure><p><strong>两种请求方式差异点：</strong><br><code>post</code>与<code>request</code>方式的数据传输时注意<code>urllib2.Request(url,data)</code>这里面的数据传输</p><p><strong>注意处理请求的headers</strong><br>很多时候我们服务器会检验请求是否来自于浏览器，所以我们需要在请求的头部伪装成浏览器来请求服务器.一般做请求的时候，最好都要伪装成浏览器，防止出现拒绝访问等错误，这也是一种反爬虫的一种策略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user_agent = &#123;<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400 QQBrowser/9.7.12661.400'</span>&#125;</span><br><span class="line">header = &#123;<span class="string">'User-Agent'</span>:user_agent&#125;</span><br><span class="line">url = <span class="string">'http://www.qq.com/'</span></span><br><span class="line">request = urllib2.Request(url,headers=header)</span><br><span class="line">response = urllib2.urlopen(request)</span><br><span class="line"><span class="keyword">print</span> response.read().decode(<span class="string">'gbk'</span>)<span class="comment">#这里注意一下需要对读取的网页内容进行转码，先要查看一下网页的chatset是什么格式.</span></span><br></pre></td></tr></table></figure><p>在浏览器上打开<code>www.qq.com</code>然后按F12，查看<code>User-Agent</code>:</p><blockquote><p>User-Agent : 有些服务器或 Proxy 会通过该值来判断是否是浏览器发出的请求<br>Content-Type : 在使用 REST 接口时，服务器会检查该值，用来确定 HTTP Body 中的内容该怎样解析。<br>application/xml ： 在 XML RPC，如 RESTful/SOAP 调用时使用<br>application/json ： 在 JSON RPC 调用时使用<br>application/x-www-form-urlencoded ： 浏览器提交 Web 表单时使用<br>在使用服务器提供的 RESTful 或 SOAP 服务时， Content-Type 设置错误会导致服务器拒绝服务</p></blockquote><p>###requests<br><code>requests</code>是Python最为常用的<code>http</code>请求库，也是极其简单的.使用的时候，首先需要对<code>requests</code>进行安装，直接使用Pycharm进行一键安装。</p><p>#####1.响应与编码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">print</span> type(r)</span><br><span class="line"><span class="keyword">print</span> r.status_code</span><br><span class="line"><span class="keyword">print</span> r.encoding</span><br><span class="line"><span class="comment">#print r.content</span></span><br><span class="line"><span class="keyword">print</span> r.cookies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">requests</span>.<span class="title">models</span>.<span class="title">Response</span>'&gt;</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line"><span class="class"><span class="title">ISO</span>-8859-1</span></span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;</span><br></pre></td></tr></table></figure><p>#####2.Get请求方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">values = &#123;<span class="string">'user'</span>:<span class="string">'aaa'</span>,<span class="string">'id'</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url,values)</span><br><span class="line"><span class="keyword">print</span> r.url</span><br><span class="line"></span><br><span class="line">得到：http://www.baidu.com/?user=aaa&amp;id=123</span><br></pre></td></tr></table></figure><p>#####3.Post请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">values = &#123;<span class="string">'user'</span>:<span class="string">'aaa'</span>,<span class="string">'id'</span>:<span class="string">'123'</span>&#125;</span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.post(url,values)</span><br><span class="line"><span class="keyword">print</span> r.url</span><br><span class="line"><span class="comment">#print r.text</span></span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">http://www.baidu.com/</span><br></pre></td></tr></table></figure><p>#####4.请求头headers处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user_agent = &#123;<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400 QQBrowser/9.7.12661.400'</span>&#125;</span><br><span class="line">header = &#123;<span class="string">'User-Agent'</span>:user_agent&#125;</span><br><span class="line">url = <span class="string">'http://www.baidu.com/'</span></span><br><span class="line">r = requests.get(url,headers=header)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>#####5.响应码code与响应头headers处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.status_code == requests.codes.ok:</span><br><span class="line">    <span class="keyword">print</span> r.status_code</span><br><span class="line">    <span class="keyword">print</span> r.headers</span><br><span class="line">    <span class="keyword">print</span> r.headers.get(<span class="string">'content-type'</span>)<span class="comment">#推荐用这种get方式获取头部字段</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    </span><br><span class="line">得到：</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">'Content-Encoding'</span>: <span class="string">'gzip'</span>, <span class="string">'Transfer-Encoding'</span>: <span class="string">'chunked'</span>, <span class="string">'Set-Cookie'</span>: <span class="string">'BDORZ=27315; max-age=86400; domain=.baidu.com; path=/'</span>, <span class="string">'Server'</span>: <span class="string">'bfe/1.0.8.18'</span>, <span class="string">'Last-Modified'</span>: <span class="string">'Mon, 23 Jan 2017 13:27:57 GMT'</span>, <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>, <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>, <span class="string">'Cache-Control'</span>: <span class="string">'private, no-cache, no-store, proxy-revalidate, no-transform'</span>, <span class="string">'Date'</span>: <span class="string">'Wed, 17 Jan 2018 07:21:21 GMT'</span>, <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;</span><br><span class="line">text/html</span><br></pre></td></tr></table></figure><p>#####6.cookie处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">url = <span class="string">'https://www.zhihu.com/'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">print</span> r.cookies</span><br><span class="line"><span class="keyword">print</span> r.cookies.keys()</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie aliyungf_tc=AQAAACYMglZy2QsAEnaG2yYR0vrtlxfz <span class="keyword">for</span> www.zhihu.com/&gt;]&gt;</span><br><span class="line">[<span class="string">'aliyungf_tc'</span>]</span><br></pre></td></tr></table></figure><p>#####7重定向与历史消息</p><p>处理重定向只是需要设置一下<code>allow_redirects</code>字段即可，将<code>allow_redirectsy</code>设置为<code>True</code>则是允许重定向的，设置为<code>False</code>则禁止重定向的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url,allow_redirects = <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> r.url</span><br><span class="line"><span class="keyword">print</span> r.status_code</span><br><span class="line"><span class="keyword">print</span> r.history</span><br><span class="line"></span><br><span class="line">得到：</span><br><span class="line">http://www.baidu.com/</span><br><span class="line"><span class="number">200</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>#####8.超时设置<br> 超时选项是通过参数<code>timeout</code>来设置的<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url,timeout = <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>#####9.代理设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxis = &#123;</span><br><span class="line">    <span class="string">'http'</span>:<span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">    <span class="string">'http'</span>:<span class="string">'http://www.qq.com'</span>,</span><br><span class="line">    <span class="string">'http'</span>:<span class="string">'http://www.sohu.com'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">r = requests.get(url,proxies = proxis)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先说明一下我的爬虫环境是基于&lt;code&gt;py2.x&lt;/code&gt;的， 为什么用这个版本呢，因为&lt;code&gt;py2.x&lt;/code&gt;的版本支持的多，而且一般会使用&lt;code&gt;py2.x&lt;/code&gt;环境，基本在&lt;code&gt;py3.x&lt;/code&gt;也没有太大问题，好了，进入正
      
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫把爬取到的数据存储到excel中</title>
    <link href="http://yoursite.com/2018/01/24/%E6%8A%8A%E7%88%AC%E5%8F%96%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%88%B0execl%E4%B8%AD/"/>
    <id>http://yoursite.com/2018/01/24/把爬取的数据存储到execl中/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:41:58.485Z</updated>
    
    <content type="html"><![CDATA[<p>操作Execl其实里面很多东西要去了解，但这里我讲常用的读写，满足我们的一般需求,感兴趣的朋友可以自己去深入。</p><p>###1. 读execl文件<br>需要安装 xlrd库，老办法，直接在setting中安装，然后导入放可使用python读取execl</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="string">'execl_file.xlsx'</span>)</span><br><span class="line">table = data.sheets()[<span class="number">0</span>]    <span class="comment">#通过索引顺序获取table, 一个execl文件一般都至少有一个table</span></span><br><span class="line"><span class="keyword">print</span> table.nrows   <span class="comment">#行数</span></span><br><span class="line"><span class="keyword">print</span> table.ncols   <span class="comment">#列数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(table.nrows):    <span class="comment">#遍历行数据</span></span><br><span class="line">    <span class="keyword">print</span> table.row_values(k)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(table.ncols):    <span class="comment">#便利列数据</span></span><br><span class="line">    <span class="keyword">print</span> table.col_values(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> table.cell(<span class="number">2</span>,<span class="number">2</span>).value     <span class="comment">#获取单元格数据，前一个是行数，从0开始，后一个是列数，且列数从0开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,table.nrows):        <span class="comment">#行数据，我正好要去掉第1行标题</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(table.ncols):</span><br><span class="line">          <span class="keyword">print</span> table.cell(a,b).value   </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'----------------------'</span></span><br><span class="line"></span><br><span class="line">得到结果：</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">[<span class="string">u'\u54c1\u724c'</span>, <span class="string">u'size'</span>, <span class="string">u'\u4ef7\u683c'</span>, <span class="string">u'\u6027\u522b'</span>]</span><br><span class="line">[<span class="string">u'Nike'</span>, <span class="number">90.0</span>, <span class="number">1033.0</span>, <span class="string">u'\u7537'</span>]</span><br><span class="line">[<span class="string">u'addida'</span>, <span class="number">88.0</span>, <span class="number">444.0</span>, <span class="string">u'\u5973'</span>]</span><br><span class="line">[<span class="string">u'zara'</span>, <span class="number">87.0</span>, <span class="number">333.0</span>, <span class="string">u'\u7537'</span>]</span><br><span class="line">[<span class="string">u'Lining'</span>, <span class="number">33.0</span>, <span class="number">22.0</span>, <span class="string">u'\u7537'</span>]</span><br><span class="line">[<span class="string">u'kappa'</span>, <span class="number">33.0</span>, <span class="number">222.0</span>, <span class="string">u'\u7537'</span>]</span><br><span class="line">[<span class="string">u'\u54c1\u724c'</span>, <span class="string">u'Nike'</span>, <span class="string">u'addida'</span>, <span class="string">u'zara'</span>, <span class="string">u'Lining'</span>, <span class="string">u'kappa'</span>]</span><br><span class="line">[<span class="string">u'size'</span>, <span class="number">90.0</span>, <span class="number">88.0</span>, <span class="number">87.0</span>, <span class="number">33.0</span>, <span class="number">33.0</span>]</span><br><span class="line">[<span class="string">u'\u4ef7\u683c'</span>, <span class="number">1033.0</span>, <span class="number">444.0</span>, <span class="number">333.0</span>, <span class="number">22.0</span>, <span class="number">222.0</span>]</span><br><span class="line">[<span class="string">u'\u6027\u522b'</span>, <span class="string">u'\u7537'</span>, <span class="string">u'\u5973'</span>, <span class="string">u'\u7537'</span>, <span class="string">u'\u7537'</span>, <span class="string">u'\u7537'</span>]</span><br><span class="line"><span class="number">444.0</span></span><br><span class="line">Nike</span><br><span class="line"><span class="number">90.0</span></span><br><span class="line"><span class="number">1033.0</span></span><br><span class="line">男</span><br><span class="line">----------------------</span><br><span class="line">addida</span><br><span class="line"><span class="number">88.0</span></span><br><span class="line"><span class="number">444.0</span></span><br><span class="line">女</span><br><span class="line">----------------------</span><br><span class="line">zara</span><br><span class="line"><span class="number">87.0</span></span><br><span class="line"><span class="number">333.0</span></span><br><span class="line">男</span><br><span class="line">----------------------</span><br><span class="line">Lining</span><br><span class="line"><span class="number">33.0</span></span><br><span class="line"><span class="number">22.0</span></span><br><span class="line">男</span><br><span class="line">----------------------</span><br><span class="line">kappa</span><br><span class="line"><span class="number">33.0</span></span><br><span class="line"><span class="number">222.0</span></span><br><span class="line">男</span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><p>很简单没有什么要解释的了</p><h3 id="2-复习一下range函数"><a href="#2-复习一下range函数" class="headerlink" title="2. 复习一下range函数"></a>2. 复习一下range函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &gt;&gt;&gt; range(1,5) #代表从1到5(不包含5)</span><br><span class="line"># [1, 2, 3, 4]</span><br><span class="line"># &gt;&gt;&gt; range(1,5,2) #代表从1到5，间隔2(不包含5)</span><br><span class="line"># [1, 3]</span><br><span class="line"># &gt;&gt;&gt; range(5) #代表从0到5(不包含5)</span><br><span class="line"># [0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="3-写入execl"><a href="#3-写入execl" class="headerlink" title="3. 写入execl"></a>3. 写入execl</h3><p>需要安装xlwt库，老办法自己先安装，不多说了,需要导入xlwt然后放可使用python写入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)<span class="comment">#创建workbook 其实就是execl，</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">'my_worksheet'</span>) <span class="comment">#创建表，如果想创建多个，直接在后面再add_sheet</span></span><br><span class="line">worksheet.write(<span class="number">0</span>,<span class="number">0</span>,label =<span class="string">'Row 0,Column 0 Value'</span>) <span class="comment">#3个参数，第一个参数表示行，从0开始，第二个参数表示列从0开始，第三个参数表示插入的数值 </span></span><br><span class="line">workbook.save(<span class="string">'execl_liu.xlsx'</span>)<span class="comment">#写完记得一定要保存</span></span><br></pre></td></tr></table></figure><p>完整实例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f = xlwt.Workbook() <span class="comment">#创建工作薄</span></span><br><span class="line"><span class="comment">#创建个人信息表</span></span><br><span class="line">sheet1 = f.add_sheet(<span class="string">u'个人信息'</span>,cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line">rowTitle = [<span class="string">u'编号'</span>,<span class="string">u'姓名'</span>,<span class="string">u'性别'</span>,<span class="string">u'年龄'</span>]</span><br><span class="line">rowDatas = [[<span class="string">u'张一'</span>,<span class="string">u'男'</span>,<span class="string">u'18'</span>],[<span class="string">u'李二'</span>,<span class="string">u'女'</span>,<span class="string">u'20'</span>],[<span class="string">u'黄三'</span>,<span class="string">u'男'</span>,<span class="string">u'38'</span>],[<span class="string">u'刘四'</span>,<span class="string">u'男'</span>,<span class="string">u'88'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(rowTitle)):</span><br><span class="line">    sheet1.write(<span class="number">0</span>,i,rowTitle[i],set_style(<span class="string">'Times new Roman'</span>,<span class="number">220</span>,<span class="keyword">True</span>)) 后面是设置样式</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(rowDatas)):    <span class="comment">#先遍历外层的集合，即每行数据</span></span><br><span class="line">    rowDatas[k].insert(<span class="number">0</span>,k+<span class="number">1</span>)   <span class="comment">#每一行数据插上编号即为每一个人插上编号</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(rowDatas[k])): <span class="comment">#再遍历内层集合</span></span><br><span class="line">        sheet1.write(k+<span class="number">1</span>,j,rowDatas[k][j])          <span class="comment">#写入数据,k+1表示先去掉标题行，另外每一行数据也会变化,j正好表示第一列数据的变化，rowdatas[k][j] 插入数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建个人收入表</span></span><br><span class="line">sheet1 = f.add_sheet(<span class="string">u'个人收入表'</span>,cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line">rowTitle2 = [<span class="string">u'编号'</span>,<span class="string">u'姓名'</span>,<span class="string">u'学历'</span>,<span class="string">u'工资'</span>]</span><br><span class="line">rowDatas2 = [[<span class="string">u'张一'</span>,<span class="string">u'本科'</span>,<span class="string">u'8000'</span>],[<span class="string">u'李二'</span>,<span class="string">u'硕士'</span>,<span class="string">u'10000'</span>],[<span class="string">u'黄三'</span>,<span class="string">u'博士'</span>,<span class="string">u'20000'</span>],[<span class="string">u'刘四'</span>,<span class="string">u'教授'</span>,<span class="string">u'50000'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(rowTitle2)):</span><br><span class="line">    sheet1.write(<span class="number">0</span>,i,rowTitle2[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>,len(rowDatas2)):    <span class="comment">#先遍历外层的集合</span></span><br><span class="line">    rowDatas2[k].insert(<span class="number">0</span>,k+<span class="number">1</span>)   <span class="comment">#每一行数据插上编号即为每一个人插上编号</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(rowDatas2[k])): <span class="comment">#再遍历内层集合</span></span><br><span class="line">        sheet1.write(k+<span class="number">1</span>,j,rowDatas2[k][j])          <span class="comment">#写入数据,k+1表示先去掉标题行，另外每一行数据也会变化,j正好表示第一列数据的变化，rowdatas[k][j] 插入数据</span></span><br><span class="line"></span><br><span class="line">f.save(<span class="string">'info.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>最后得到的效果图</p><h3 id="3-把爬取的猪八戒数据插入到execl中"><a href="#3-把爬取的猪八戒数据插入到execl中" class="headerlink" title="3. 把爬取的猪八戒数据插入到execl中"></a>3. 把爬取的猪八戒数据插入到execl中</h3><p>这里直接上代码了，相关的注释都在代码里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZbjData</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">     self.f = xlwt.Workbook()   <span class="comment">#创建工作薄</span></span><br><span class="line">     self.sheet1 = self.f.add_sheet(<span class="string">u'任务列表'</span>,cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line">     self.rowsTitle = [<span class="string">u'编号'</span>,<span class="string">u'标题'</span>,<span class="string">u'简介'</span>,<span class="string">u'价格'</span>,<span class="string">u'截止时间'</span>,<span class="string">u'链接'</span>]</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(self.rowsTitle)):</span><br><span class="line">        self.sheet1.write(<span class="number">0</span>, i, self.rowsTitle[i], self.set_style(<span class="string">'Times new Roman'</span>, <span class="number">220</span>, <span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">     self.f.save(<span class="string">'zbj.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">set_style</span><span class="params">(self,name, height, bold=False)</span>:</span></span><br><span class="line">        style = xlwt.XFStyle()  <span class="comment"># 初始化样式</span></span><br><span class="line">        font = xlwt.Font()  <span class="comment"># 为样式创建字体</span></span><br><span class="line">        font.name = name</span><br><span class="line">        font.bold = bold</span><br><span class="line">        font.colour_index = <span class="number">2</span></span><br><span class="line">        font.height = height</span><br><span class="line">        style.font = font</span><br><span class="line">        <span class="keyword">return</span> style</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>):</span><br><span class="line">        url = <span class="string">'http://task.zbj.com/t-ppsj/p&#123;&#125;s5.html'</span>.format(i+<span class="number">1</span>)</span><br><span class="line">        self.spiderPage(url)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">spiderPage</span><span class="params">(self,url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = xlrd.open_workbook(<span class="string">'zbj.xlsx'</span>)</span><br><span class="line">        table = data.sheets()[<span class="number">0</span>]  <span class="comment"># 通过索引顺序获取table, 一个execl文件一般都至少有一个table</span></span><br><span class="line">        rowCount = table.nrows      <span class="comment">#获取行数   ，下次从这一行开始</span></span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">'http'</span>: <span class="string">'http://221.202.248.52:80'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        user_agent = <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400'</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>: user_agent&#125;</span><br><span class="line">        htmlText = requests.get(url, headers=headers,proxies=proxies).text</span><br><span class="line"></span><br><span class="line">        selector = etree.HTML(htmlText)</span><br><span class="line">        tds = selector.xpath(<span class="string">'//*[@class="tab-switch tab-progress"]/table/tr'</span>)</span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tds:</span><br><span class="line">             data = []</span><br><span class="line">             price = td.xpath(<span class="string">'./td/p/em/text()'</span>)</span><br><span class="line">             href = td.xpath(<span class="string">'./td/p/a/@href'</span>)</span><br><span class="line">             title = td.xpath(<span class="string">'./td/p/a/text()'</span>)</span><br><span class="line">             subTitle = td.xpath(<span class="string">'./td/p/text()'</span>)</span><br><span class="line">             deadline = td.xpath(<span class="string">'./td/span/text()'</span>)</span><br><span class="line">             price = price[<span class="number">0</span>] <span class="keyword">if</span> len(price)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>    <span class="comment"># python的三目运算 :为真时的结果 if 判定条件 else 为假时的结果</span></span><br><span class="line">             title = title[<span class="number">0</span>] <span class="keyword">if</span> len(title)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             href = href[<span class="number">0</span>] <span class="keyword">if</span> len(href)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             subTitle = subTitle[<span class="number">0</span>] <span class="keyword">if</span> len(subTitle)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             deadline = deadline[<span class="number">0</span>] <span class="keyword">if</span> len(deadline)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#拼装成一个集合</span></span><br><span class="line">             data.append(rowCount+m)    <span class="comment">#加个序号</span></span><br><span class="line">             data.append(title)</span><br><span class="line">             data.append(subTitle)</span><br><span class="line">             data.append(price)</span><br><span class="line">             data.append(deadline)</span><br><span class="line">             data.append(href)</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">                 self.sheet1.write(rowCount+m,i,data[i])    <span class="comment">#写入数据到execl中</span></span><br><span class="line"></span><br><span class="line">             m+=<span class="number">1</span>   <span class="comment">#记录行数增量</span></span><br><span class="line">             <span class="keyword">print</span> m</span><br><span class="line">             <span class="keyword">print</span> price, title, href, subTitle, deadline</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'出错'</span>,e.message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        self.f.save(<span class="string">'zbj.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'_main_'</span>:</span><br><span class="line">    zbj = ZbjData()</span><br><span class="line">    zbj.getUrl()</span><br></pre></td></tr></table></figure><p>注意这里爬取数据的时候，有的代理ip还是被禁用了，所以获取数据有失败的情况，所以这里需要有异常处理.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;操作Execl其实里面很多东西要去了解，但这里我讲常用的读写，满足我们的一般需求,感兴趣的朋友可以自己去深入。&lt;/p&gt;
&lt;p&gt;###1. 读execl文件&lt;br&gt;需要安装 xlrd库，老办法，直接在setting中安装，然后导入放可使用python读取execl&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬大量数据时防止IP被封</title>
    <link href="http://yoursite.com/2018/01/24/%E9%98%B2%E6%AD%A2iP%E8%A2%AB%E5%B0%81/"/>
    <id>http://yoursite.com/2018/01/24/防止iP被封/</id>
    <published>2018-01-24T07:37:05.000Z</published>
    <updated>2018-01-24T11:41:32.388Z</updated>
    
    <content type="html"><![CDATA[<p>继续老套路，这两天我爬取了猪八戒上的一些数据 网址是：<code>http://task.zbj.com/t-ppsj/p1s5.html</code>，可能是由于爬取的数据量有点多吧，结果我的IP被封了，需要自己手动来验证解封ip,但这显然阻止了我爬取更多的数据了。</p><p><strong>下面是我写的爬取猪八戒的被封IP的代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>):</span><br><span class="line">        url = <span class="string">'http://task.zbj.com/t-ppsj/p&#123;&#125;s5.html'</span>.format(i+<span class="number">1</span>)</span><br><span class="line">        spiderPage(url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spiderPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    htmlText = requests.get(url).text</span><br><span class="line">    selector = etree.HTML(htmlText)</span><br><span class="line">    tds = selector.xpath(<span class="string">'//*[@class="tab-switch tab-progress"]/table/tr'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">         <span class="keyword">for</span> td <span class="keyword">in</span> tds:</span><br><span class="line">             price = td.xpath(<span class="string">'./td/p/em/text()'</span>)</span><br><span class="line">             href = td.xpath(<span class="string">'./td/p/a/@href'</span>)</span><br><span class="line">             title = td.xpath(<span class="string">'./td/p/a/text()'</span>)</span><br><span class="line">             subTitle = td.xpath(<span class="string">'./td/p/text()'</span>)</span><br><span class="line">             deadline = td.xpath(<span class="string">'./td/span/text()'</span>)</span><br><span class="line">             price = price[<span class="number">0</span>] <span class="keyword">if</span> len(price)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>    <span class="comment"># python的三目运算 :为真时的结果 if 判定条件 else 为假时的结果</span></span><br><span class="line">             title = title[<span class="number">0</span>] <span class="keyword">if</span> len(title)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             href = href[<span class="number">0</span>] <span class="keyword">if</span> len(href)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             subTitle = subTitle[<span class="number">0</span>] <span class="keyword">if</span> len(subTitle)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             deadline = deadline[<span class="number">0</span>] <span class="keyword">if</span> len(deadline)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             <span class="keyword">print</span> price,title,href,subTitle,deadline</span><br><span class="line">             <span class="keyword">print</span> <span class="string">'---------------------------------------------------------------------------------------'</span></span><br><span class="line">             spiderDetail(href)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'出错'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spiderDetail</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">         htmlText = requests.get(url).text</span><br><span class="line">         selector = etree.HTML(htmlText)</span><br><span class="line">         aboutHref = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/div/p[1]/a/@href'</span>)</span><br><span class="line">         price = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/div/p[1]/text()'</span>)</span><br><span class="line">         title = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/h2/text()'</span>)</span><br><span class="line">         contentDetail = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[2]/div/div[1]/div[1]/text()'</span>)</span><br><span class="line">         publishDate = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[2]/div/div[1]/p/text()'</span>)</span><br><span class="line">         aboutHref = aboutHref[<span class="number">0</span>] <span class="keyword">if</span> len(aboutHref) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>  <span class="comment"># python的三目运算 :为真时的结果 if 判定条件 else 为假时的结果</span></span><br><span class="line">         price = price[<span class="number">0</span>] <span class="keyword">if</span> len(price) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         title = title[<span class="number">0</span>] <span class="keyword">if</span> len(title) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         contentDetail = contentDetail[<span class="number">0</span>] <span class="keyword">if</span> len(contentDetail) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         publishDate = publishDate[<span class="number">0</span>] <span class="keyword">if</span> len(publishDate) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         <span class="keyword">print</span> aboutHref,price,title,contentDetail,publishDate</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">'出错'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'_main_'</span>:</span><br><span class="line">   getUrl()</span><br></pre></td></tr></table></figure><p>我发现代码运行完后，后面有几页数据没有被爬取，我再也没有办法去访问猪八戒网站了，等过了一段时间才能去访问他们的网站，这就很尴尬了，我得防止被封IP</p><p>如何防止爬取数据的时候被网站封IP这里有一些套路.查了一些套路</p><h5 id="1-修改请求头"><a href="#1-修改请求头" class="headerlink" title="1.修改请求头"></a>1.修改请求头</h5><p>之前的爬虫代码没有添加头部，这里我添加了头部，模拟成浏览器去访问网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_agent = <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: user_agent&#125;</span><br><span class="line">htmlText = requests.get(url, headers=headers, proxies=proxies).text</span><br></pre></td></tr></table></figure><h5 id="2-采用代理IP"><a href="#2-采用代理IP" class="headerlink" title="2.采用代理IP"></a>2.采用代理IP</h5><p>当自己的ip被网站封了之后，只能采用代理ip的方式进行爬取，所以每次爬取的时候尽量用代理ip来爬取，封了代理还有代理。</p><p>这里我引用了这个博客的一段代码来生成ip地址:<code>http://blog.csdn.net/lammonpeter/article/details/52917264</code></p><p><strong>生成代理ip,大家可以直接把这个代码拿去用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># IP地址取自国内髙匿代理IP网站：http://www.xicidaili.com/nn/</span></span><br><span class="line"><span class="comment"># 仅仅爬取首页IP地址就足够一般使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip_list</span><span class="params">(url, headers)</span>:</span></span><br><span class="line">    web_data = requests.get(url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</span><br><span class="line">    ips = soup.find_all(<span class="string">'tr'</span>)</span><br><span class="line">    ip_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</span><br><span class="line">        ip_info = ips[i]</span><br><span class="line">        tds = ip_info.find_all(<span class="string">'td'</span>)</span><br><span class="line">        ip_list.append(tds[<span class="number">1</span>].text + <span class="string">':'</span> + tds[<span class="number">2</span>].text)</span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_ip</span><span class="params">(ip_list)</span>:</span></span><br><span class="line">    proxy_list = []</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">        proxy_list.append(<span class="string">'http://'</span> + ip)</span><br><span class="line">    proxy_ip = random.choice(proxy_list)</span><br><span class="line">    proxies = &#123;<span class="string">'http'</span>: proxy_ip&#125;</span><br><span class="line">    <span class="keyword">return</span> proxies</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'http://www.xicidaili.com/nn/'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ip_list = get_ip_list(url, headers=headers)</span><br><span class="line">    proxies = get_random_ip(ip_list)</span><br><span class="line">    print(proxies)</span><br></pre></td></tr></table></figure><p>好了我用上面的代码给我生成了一批ip地址（有些ip地址可能无效，但只要不封我自己的ip就可以了,哈哈），然后我就可以在我的请求头部添加ip地址</p><p><strong> 给我们的请求添加代理ip</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://124.72.109.183:8118'</span>,</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://49.85.1.79:31666'</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">user_agent = <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: user_agent&#125;</span><br><span class="line">htmlText = requests.get(url, headers=headers, timeout=<span class="number">3</span>, proxies=proxies).text</span><br></pre></td></tr></table></figure><p>目前知道的就</p><p>最后完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>):</span><br><span class="line">        url = <span class="string">'http://task.zbj.com/t-ppsj/p&#123;&#125;s5.html'</span>.format(i+<span class="number">1</span>)</span><br><span class="line">        spiderPage(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spiderPage</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">'http'</span>: <span class="string">'http://221.202.248.52:80'</span>,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        user_agent = <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4295.400'</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>: user_agent&#125;</span><br><span class="line">        htmlText = requests.get(url, headers=headers,proxies=proxies).text</span><br><span class="line"></span><br><span class="line">        selector = etree.HTML(htmlText)</span><br><span class="line">        tds = selector.xpath(<span class="string">'//*[@class="tab-switch tab-progress"]/table/tr'</span>)</span><br><span class="line">        <span class="keyword">for</span> td <span class="keyword">in</span> tds:</span><br><span class="line">             price = td.xpath(<span class="string">'./td/p/em/text()'</span>)</span><br><span class="line">             href = td.xpath(<span class="string">'./td/p/a/@href'</span>)</span><br><span class="line">             title = td.xpath(<span class="string">'./td/p/a/text()'</span>)</span><br><span class="line">             subTitle = td.xpath(<span class="string">'./td/p/text()'</span>)</span><br><span class="line">             deadline = td.xpath(<span class="string">'./td/span/text()'</span>)</span><br><span class="line">             price = price[<span class="number">0</span>] <span class="keyword">if</span> len(price)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>    <span class="comment"># python的三目运算 :为真时的结果 if 判定条件 else 为假时的结果</span></span><br><span class="line">             title = title[<span class="number">0</span>] <span class="keyword">if</span> len(title)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             href = href[<span class="number">0</span>] <span class="keyword">if</span> len(href)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             subTitle = subTitle[<span class="number">0</span>] <span class="keyword">if</span> len(subTitle)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             deadline = deadline[<span class="number">0</span>] <span class="keyword">if</span> len(deadline)&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">             <span class="keyword">print</span> price,title,href,subTitle,deadline</span><br><span class="line">             <span class="keyword">print</span> <span class="string">'---------------------------------------------------------------------------------------'</span></span><br><span class="line">             spiderDetail(href)</span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'出错'</span>,e.message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spiderDetail</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">         htmlText = requests.get(url).text</span><br><span class="line">         selector = etree.HTML(htmlText)</span><br><span class="line">         aboutHref = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/div/p[1]/a/@href'</span>)</span><br><span class="line">         price = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/div/p[1]/text()'</span>)</span><br><span class="line">         title = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[1]/div/div/h2/text()'</span>)</span><br><span class="line">         contentDetail = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[2]/div/div[1]/div[1]/text()'</span>)</span><br><span class="line">         publishDate = selector.xpath(<span class="string">'//*[@id="utopia_widget_10"]/div[2]/div/div[1]/p/text()'</span>)</span><br><span class="line">         aboutHref = aboutHref[<span class="number">0</span>] <span class="keyword">if</span> len(aboutHref) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>  <span class="comment"># python的三目运算 :为真时的结果 if 判定条件 else 为假时的结果</span></span><br><span class="line">         price = price[<span class="number">0</span>] <span class="keyword">if</span> len(price) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         title = title[<span class="number">0</span>] <span class="keyword">if</span> len(title) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         contentDetail = contentDetail[<span class="number">0</span>] <span class="keyword">if</span> len(contentDetail) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         publishDate = publishDate[<span class="number">0</span>] <span class="keyword">if</span> len(publishDate) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">         <span class="keyword">print</span> aboutHref,price,title,contentDetail,publishDate</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">'出错'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'_main_'</span>:</span><br><span class="line">    getUrl()</span><br></pre></td></tr></table></figure><p>最后程序完美运行，再也没有出现被封IP的情况。当然防止被封IP肯定不止这些了，这还需要进一步探索!</p><p>###最后<br>当然数据我是已经抓取过来了，但是我的数据都没有完美呈现出来，我应该写入execl文件，或者数据库中啊，这样才能方便采用.所以接下来我准备了使用<br>Python操作execl,mysql,mongoDB</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续老套路，这两天我爬取了猪八戒上的一些数据 网址是：&lt;code&gt;http://task.zbj.com/t-ppsj/p1s5.html&lt;/code&gt;，可能是由于爬取的数据量有点多吧，结果我的IP被封了，需要自己手动来验证解封ip,但这显然阻止了我爬取更多的数据了。&lt;/p
      
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://yoursite.com/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>为什么要学习Python以及Python环境安装</title>
    <link href="http://yoursite.com/2018/01/24/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0Python%E4%BB%A5%E5%8F%8APython%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/01/24/为什么要学习Python以及Python环境安装/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2018-01-24T11:42:37.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要学习Python"><a href="#为什么要学习Python" class="headerlink" title="为什么要学习Python"></a>为什么要学习Python</h3><p>Python十分强大，学习python理由我就列举如下几条:</p><ol><li>可以做服务器后台</li><li>可以做自动化工具</li><li>可以网络爬取数据</li><li>可以做web网站</li><li>可以进行数据分析</li><li>可以人工智能研究</li></ol><blockquote><p>个人以前学的东西太杂了:Android(主),java,php,go,ios,前端。现在准备专挑一门语言进行深入。在Android行情没落的时候，在人工智能与大数据到来的时候，学习Python也许是一个不错的选择.从前端到后台，什么都能干。<strong>python在手，天下我有！</strong></p></blockquote><p>#对于新手来说是快速学习而不是折腾IDE,Pycharm集成了所有python需要用的插件，以及第三方库，一键安装一系列你需要的库像Numpy,Requests,MatplotLib等，让你快速开发不折腾与环境，</p><p>###选择Python IDE</p><p>一直以来对JetBranis公司开发的一些IDE情有独钟，虽然他们的IDE对电脑要求配置非常高，但不介意，像他们的IDE涵盖大部分主流开发环境并且也是最好的IDE.Android ,java,php,python,go,ios,前端，他们公司都有对应的IDE,而且他们的IDE工具都是一脉相承的，你会使用其中一个，那么其它的IDE基本也是相同的用法。</p><h3 id="Python环境安装"><a href="#Python环境安装" class="headerlink" title="Python环境安装"></a>Python环境安装</h3><p>今天开发专注Python学习，所以jetbrains公司的<strong>Pycharm</strong>当然是我开发的首选工具了</p><ol><li><p><strong>Pytharm win版 <a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">下载地址</a></strong></p></li><li><p>然后需要一个激活码，这里我选择一个server,输入地址<code>http://idea.imsxm.com/</code> 即可激活.</p></li><li><p>然后启动IDE这里打开后会提示一个错误，说你没有选择python解释器  <code>No Python interpreter selected</code></p></li><li><p>打开python官网，下载python解释器<strong><a href="https://www.python.org/" target="_blank" rel="noopener">官网</a></strong>，这里我下载的是3.6版本的，虽然大多数成熟的库还是在用2.x版本，但既然是学习，肯定是要面向未来 ，所以我这里选择的是3.6版本</p></li><li><p>双击安装Python解释器文件。</p></li><li><p>安装完毕后，在IDE启动界面显示错误的地方，添加add local来选择解释器，然后点击Create </p></li><li><p>这样python环境搭建完毕</p></li></ol><p>尼玛：太简单了，就忘了截图，其实搭建真的是非常简单，无图就无图吧。</p><p>最后上一句经典代码hello world效果图</p><p><img src="http://upload-images.jianshu.io/upload_images/638116-e4469faa3720ac22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ图片20170830120246.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要学习Python&quot;&gt;&lt;a href=&quot;#为什么要学习Python&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习Python&quot;&gt;&lt;/a&gt;为什么要学习Python&lt;/h3&gt;&lt;p&gt;Python十分强大，学习python理由我就列举如下几条:
      
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
